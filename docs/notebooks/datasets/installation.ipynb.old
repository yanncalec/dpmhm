{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "19108fd3",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Installation of Datasets\n",
    "\n",
    "This tutorial shows how to install a dataset. \n",
    "Here's the list of datasets supported by the `dpmhm` package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9562a0c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['CWRU',\n",
       " 'DCASE2021',\n",
       " 'DIRG',\n",
       " 'FEMTO',\n",
       " 'FRAUNHOFER151',\n",
       " 'FRAUNHOFER205',\n",
       " 'IMS',\n",
       " 'MAFAULDA',\n",
       " 'MFPT',\n",
       " 'OTTAWA',\n",
       " 'PADERBORN',\n",
       " 'PHMAP2021',\n",
       " 'SEUC',\n",
       " 'XJTU']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dpmhm\n",
    "dpmhm.datasets.get_dataset_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9970d7d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import tensorflow_datasets as tfds\n",
    "\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "from IPython.display import Audio"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb6c5e43-be47-4cc8-9020-93e8e3ee35a1",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "30970af4-c554-4866-b478-04c1ca25acf8",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_name = 'CWRU'\n",
    "\n",
    "# split0, split1, split2 = tfds.even_splits('train', n=3)\n",
    "\n",
    "ds_all, ds_info = tfds.load(\n",
    "    dataset_name, \n",
    "    # split='',\n",
    "    # split=['train[:75%]', 'train[75%:]'],    \n",
    "    # split=[split1, split2],    \n",
    "    # download=True,  #\n",
    "    # data_dir='/home/han/Database/tensorflow_datasets/',\n",
    "    with_info=True,\n",
    "    # batch_size=-1,  # load the whole dataset into a single batch\n",
    ")\n",
    "\n",
    "ds0 = ds_all['train']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d0e74c1-8262-415b-a90e-299387c20066",
   "metadata": {},
   "source": [
    "### Data split & transformation pipeline\n",
    "\n",
    "Domain is defined as the type of LoadForce: [0,1,2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "01ae5ba0-80ab-40ab-be37-07a278c20387",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "channels = ['DE', 'FE', 'BA']  # will rule out the normal data\n",
    "# channels = ['DE']  # will rule out the normal data\n",
    "\n",
    "keys = ['FaultComponent', 'FaultSize']\n",
    "# keys = ['FaultSize']\n",
    "# keys = ['FaultComponent']\n",
    "# keys = []\n",
    "\n",
    "_extractor = lambda x, sr: feature.spectrogram(x, sr, time_window=0.025, hop_step=0.0125, to_db=True, normalize=False)\n",
    "\n",
    "outdir = Path('/home/han/tmp/') / dataset_name / 'spectrogram'\n",
    "# extractor = lambda x, sr: feature.melspectrogram(x, sr, time_window=0.025, hop_step=0.0125, n_mels=128, normalize=True)\n",
    "# outdir = Path('/home/han/tmp/cwru/mel')\n",
    "\n",
    "window_shape = (64, 64)\n",
    "downsample = (64, 64)\n",
    "\n",
    "# window_shape = 64\n",
    "# downsample = 64"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8acf8f27-20d9-43ba-976b-0f8a50e15002",
   "metadata": {},
   "source": [
    "#### For full domain-adaptation\n",
    "\n",
    "Transfer learning is applied (training & validation) on the full domain LoadForce=[0,1,2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b91c7efb",
   "metadata": {},
   "outputs": [],
   "source": [
    "compactor = preprocessing.DatasetCompactor(ds0, keys=keys, channels=channels)\n",
    "\n",
    "extractor = preprocessing.FeatureExtractor(compactor.dataset, _extractor)\n",
    "\n",
    "slider = preprocessing.WindowSlider(extractor.dataset, window_shape=window_shape, downsample=downsample)\n",
    "\n",
    "fp = tempfile.mkdtemp()\n",
    "\n",
    "slider.serialize(fp)\n",
    "\n",
    "# dss = slider.dataset.shuffle(buffer_size=5000, seed=1234)\n",
    "# dss = slider.dataset.take(5)\n",
    "paired_pos = preprocessing.PairedView(slider.dataset, keys=['FileName'], positive=True)\n",
    "paired_neg = preprocessing.PairedView(slider.dataset, keys=['FileName'], positive=False)\n",
    "\n",
    "# paired_pos.dataset\n",
    "# paired_neg.dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "1500a9de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'label': TensorSpec(shape=<unknown>, dtype=tf.string, name=None),\n",
       "  'metadata': {'FaultSize': TensorSpec(shape=(), dtype=tf.float32, name=None),\n",
       "   'FaultComponent': TensorSpec(shape=(), dtype=tf.string, name=None),\n",
       "   'FileName': TensorSpec(shape=(), dtype=tf.string, name=None),\n",
       "   'NominalRPM': TensorSpec(shape=(), dtype=tf.uint32, name=None),\n",
       "   'LoadForce': TensorSpec(shape=(), dtype=tf.uint32, name=None),\n",
       "   'RPM': TensorSpec(shape=(), dtype=tf.uint32, name=None),\n",
       "   'FaultLocation': TensorSpec(shape=(), dtype=tf.string, name=None)},\n",
       "  'feature': TensorSpec(shape=(3, 64, 64), dtype=tf.float32, name=None)},\n",
       " {'label': TensorSpec(shape=<unknown>, dtype=tf.string, name=None),\n",
       "  'metadata': {'FaultSize': TensorSpec(shape=(), dtype=tf.float32, name=None),\n",
       "   'FaultComponent': TensorSpec(shape=(), dtype=tf.string, name=None),\n",
       "   'FileName': TensorSpec(shape=(), dtype=tf.string, name=None),\n",
       "   'NominalRPM': TensorSpec(shape=(), dtype=tf.uint32, name=None),\n",
       "   'LoadForce': TensorSpec(shape=(), dtype=tf.uint32, name=None),\n",
       "   'RPM': TensorSpec(shape=(), dtype=tf.uint32, name=None),\n",
       "   'FaultLocation': TensorSpec(shape=(), dtype=tf.string, name=None)},\n",
       "  'feature': TensorSpec(shape=(3, 64, 64), dtype=tf.float32, name=None)})"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paired_neg.dataset.element_spec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "6181ea8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n",
      "b'd39d8931' b'd39d8931'\n",
      "{'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'} {'FaultSize': 0.014, 'FaultComponent': b'InnerRace', 'FileName': b'276.mat', 'NominalRPM': 1750, 'LoadForce': 2, 'RPM': 1755, 'FaultLocation': b'FanEnd'}\n"
     ]
    }
   ],
   "source": [
    "for x in paired_pos.dataset.take(10).as_numpy_iterator():\n",
    "    print(x[0]['label'], x[1]['label'])\n",
    "    print(x[0]['metadata'], x[1]['metadata'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55828d08",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "471f8ec7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b64751cd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "94506212-488b-4ba3-a04b-08d82289e748",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dc_kwargs = {\n",
    "    'keys': keys,\n",
    "    'channels': channels,\n",
    "#     'filters': {'LoadForce': [0,1,2]}\n",
    "    # 'resampling_rate': 16000\n",
    "}\n",
    "\n",
    "ft_kwargs = {\n",
    "    'window_shape': window_shape,\n",
    "    'downsample': downsample\n",
    "}\n",
    "\n",
    "preprocessor = preprocessing.Preprocessor(ds0, extractor, dc_kwargs=dc_kwargs, ft_kwargs=ft_kwargs)\n",
    "\n",
    "# %time preprocessor.dataset_windows.save(str(outdir/'full_domain'))\n",
    "\n",
    "labels = list(preprocessor.label_dict.keys())\n",
    "\n",
    "# preprocessor.dataset_windows  # reloaded dataset with better performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e91befb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "ele = list(preprocessor.dataset_feature.take(1))[0]\n",
    "\n",
    "X = ele['feature']\n",
    "\n",
    "plt.imshow(X.numpy().squeeze(), aspect='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f20f41d7-ec57-4a52-9269-f2b4d682bc0b",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'labels' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "File \u001b[0;32m<timed exec>:1\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'labels' is not defined"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'dw_split' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [4], line 16\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# These two ways of split give similar results:\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# %time dw_split = utils.split_dataset(dw, splits, labels=None, **sp_kwargs)  # uniformly random split\u001b[39;00m\n\u001b[1;32m     14\u001b[0m get_ipython()\u001b[38;5;241m.\u001b[39mrun_line_magic(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtime\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdw_split = utils.split_dataset(dw, splits, labels=labels, **sp_kwargs)  # Few-shot style split, much slower\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m---> 16\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m k, ds \u001b[38;5;129;01min\u001b[39;00m \u001b[43mdw_split\u001b[49m\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m     17\u001b[0m     \u001b[38;5;28mprint\u001b[39m(k, utils\u001b[38;5;241m.\u001b[39mget_dataset_size(ds))\n",
      "\u001b[0;31mNameError\u001b[0m: name 'dw_split' is not defined"
     ]
    }
   ],
   "source": [
    "dw = tf.data.Dataset.load(str(outdir/'full_domain'))\n",
    "\n",
    "splits = {'train':0.1, 'val':0.7, 'test':0.2}\n",
    "# splits = {'train':0.8, 'val':0.2}\n",
    "# splits = {'train':1.0, 'val':0.}\n",
    "\n",
    "sp_kwargs = {\n",
    "    'shuffle_size': None,\n",
    "    'reshuffle_each_iteration': False,\n",
    "}\n",
    "\n",
    "# These two ways of split give similar results:\n",
    "# %time dw_split = utils.split_dataset(dw, splits, labels=None, **sp_kwargs)  # uniformly random split\n",
    "%time dw_split = utils.split_dataset(dw, splits, labels=labels, **sp_kwargs)  # Few-shot style split, much slower\n",
    "\n",
    "for k, ds in dw_split.items():\n",
    "    print(k, utils.get_dataset_size(ds))  # len(ds) might not work here, use utils.get_dataset_size(ds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6dc3c7a3-066f-45e2-95a6-f1228769b8bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optionally, save & load again the split dataset for better performance\n",
    "\n",
    "# for k,v in dw_split.items():\n",
    "#     v.save(str(outdir/'full_domain'/str(splits)/k))    \n",
    "\n",
    "# dw_split = {}\n",
    "# for p in (outdir/'full_domain'/str(splits)).iterdir():\n",
    "#     dw_split[p.name] = tf.data.Dataset.load(str(p))      \n",
    "    \n",
    "# # Loading from files makes the size information available \n",
    "# for k, ds in dw_split.items():\n",
    "#     print(k, len(ds))        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4db2729-7649-4eca-808c-46762fa9aa71",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### For partial domain-adaptation\n",
    "\n",
    "Transfer learning is applied (training & validation) on the source domain LoadForce=[0,1,2] and tested (without training) on the target domain LoadForce=[3]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b01d9889-3183-4403-852b-482a3f277ee4",
   "metadata": {},
   "outputs": [],
   "source": [
    "ft_kwargs = {\n",
    "    'window_shape': window_shape,\n",
    "    'downsample': downsample\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "53128846-1d74-4e58-b3d8-b1fd46f07b58",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Source domain\n",
    "dc_kwargs = {\n",
    "    'keys': keys,\n",
    "    'channels': channels,\n",
    "    'filters': {'LoadForce': [0,1,2]}\n",
    "}\n",
    "\n",
    "preprocessor = cwru.Preprocessor(ds0, extractor, dc_kwargs=dc_kwargs, ft_kwargs=ft_kwargs)\n",
    "preprocessor.export(str(outdir/'partial_domain'/'source'))\n",
    "# dw_source = preprocessor.dataset_windows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f1d95a42-17d8-43cf-8f5d-42b2f786f158",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Target domain\n",
    "dc_kwargs = {\n",
    "    'keys': keys,\n",
    "    'channels': channels,\n",
    "    'filters': {'LoadForce': [3]}\n",
    "}\n",
    "\n",
    "preprocessor = cwru.Preprocessor(ds0, extractor, dc_kwargs=dc_kwargs, ft_kwargs=ft_kwargs)\n",
    "preprocessor.export(str(outdir/'partial_domain'/'target'))\n",
    "# dw_target = preprocessor.dataset_windows\n",
    "\n",
    "labels = list(preprocessor.label_dict.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "37469671-3877-4d8a-acfb-9ab35e1857fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dw_split = {}\n",
    "# dw_split['train'] = tf.data.Dataset.load(str(outdir/'partial_domain'/'source'))\n",
    "# dw_split['test'] = tf.data.Dataset.load(str(outdir/'partial_domain'/'target'))\n",
    "\n",
    "dw = tf.data.Dataset.load(str(outdir/'partial_domain'/'source'))\n",
    "\n",
    "splits = {'train':0.8, 'val':0.2}\n",
    "\n",
    "sp_kwargs = {\n",
    "    'shuffle_size': None,\n",
    "    'reshuffle_each_iteration': False,\n",
    "}\n",
    "\n",
    "dw_split = utils.split_dataset(dw, splits, labels=None, **sp_kwargs)\n",
    "# dw_split = utils.split_dataset(dw, splits, labels=labels, **sp_kwargs)\n",
    "\n",
    "dw_split['test'] = tf.data.Dataset.load(str(outdir/'partial_domain'/'target'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "01fcd0b7-47ed-45c5-be3b-bd5d8e60f65f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for k,v in dw_split.items():\n",
    "#     v.save(f'/home/han/tmp/cwru_split/{k}')\n",
    "#     dw_split[k] = tf.data.Dataset.load(f'/home/han/tmp/cwru_split/{k}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9ff2eec-c365-4101-918e-f54ca8593e0d",
   "metadata": {},
   "source": [
    "### Keras preprocessing model\n",
    "We still need to apply a Keras preprocessing model before training. This step processes the windowed feature dataset by transorming the label from string to integer. \n",
    "\n",
    "**Gotcha**:\n",
    "The processed labels typically reserves the first numbers to out-of-distribution class (e.g. 0 if only one ood is used). Two possible solutions:\n",
    "- increase the number of classes passed to Keras\n",
    "- reduce by 1 the label passed to Keras to make it zero-based."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c09a62a4-4a68-468e-ab7c-65d1a11372e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessing_model = preprocessing.get_keras_preprocessing_model(dw_split['train'], labels, normalize=False)\n",
    "\n",
    "ds_split = {}\n",
    "\n",
    "for k,v in dw_split.items():\n",
    "    ds_split[k] = v.map(lambda x: preprocessing_model(x),\n",
    "                      num_parallel_calls=tf.data.AUTOTUNE)#.map(lambda x,y: (x, y-1))\n",
    "\n",
    "# lbt = set([y.numpy() for x,y in ds_split['train']])\n",
    "# lbv = set([y.numpy() for x,y in ds_split['val']])\n",
    "# assert all([v in lbt for v in lbv])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60b4801f-7fbd-4ea1-a40d-037354afe287",
   "metadata": {},
   "source": [
    "## Train a VGGish network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e0cab5f5-a256-4985-a245-e9ff98c7201f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 (64, 64, 3)\n"
     ]
    }
   ],
   "source": [
    "ele = takesample(ds_split['train'])\n",
    "input_shape = ele[0].shape\n",
    "n_classes = len(labels)+1  # must add one for the outlier class, Keras uses zero-based class labels.\n",
    "\n",
    "print(n_classes, input_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fba482b9-2568-4f35-96bf-fa07ab2be3d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 16\n",
    "ds_size = 5000\n",
    "\n",
    "ds_train = ds_split['train'].shuffle(ds_size, reshuffle_each_iteration=True).cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "ds_val = ds_split['val'].shuffle(ds_size, reshuffle_each_iteration=True).cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "ds_test = ds_split['test'].shuffle(ds_size, reshuffle_each_iteration=True).cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "# ds_train = ds_split['train'].cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "# ds_val = ds_split['val'].cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "# ds_val = ds_split['val'].cache().prefetch(tf.data.AUTOTUNE)\n",
    "# ds_test = ds_split['test'].cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "# print(len(ds_split['train']))\n",
    "# print(len(ds_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfba54d4-667d-4f09-ae11-92eeebdae627",
   "metadata": {},
   "source": [
    "### DPMHM implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a30ed963-e278-464b-976d-850f74eb7e2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VGGish_Params(n_channels=3, n_bands=64, n_frames=64, n_embedding=128, n_classes=26, kernel_size=(3, 3), activation='relu', activation_classifier=None, padding='same', pool_size=(2, 2), strides=(2, 2))\n"
     ]
    }
   ],
   "source": [
    "from dpmhm.models import vggish\n",
    "\n",
    "n_bands, n_frames, n_channels = input_shape\n",
    "\n",
    "params = vggish.VGGish_Params(n_bands=n_bands, n_frames=n_frames, n_channels=n_channels, \n",
    "                              n_embedding=128, n_classes=n_classes, padding='same',\n",
    "                              activation='relu',\n",
    "                             )\n",
    "model = vggish.get_ConvNet_A(params)\n",
    "\n",
    "print(params)\n",
    "\n",
    "# model.summary()\n",
    "\n",
    "# l=model.get_layer('classifier')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "7c122363-9cf0-4fda-8bbf-e5c5797317c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from_logits = 'softmax' not in str(model.get_layer('classifier').activation)\n",
    "\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.Adam(),\n",
    "    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=from_logits),\n",
    "    metrics=['accuracy'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "87013b0a-b517-4e94-b0ca-6ceee3cec7b5",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "59/59 [==============================] - 27s 451ms/step - loss: 6.8409 - accuracy: 0.0279 - val_loss: 3.2443 - val_accuracy: 0.0387\n",
      "Epoch 2/100\n",
      "59/59 [==============================] - ETA: 0s - loss: 3.2422 - accuracy: 0.0344"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[0;32mIn [61]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m      2\u001b[0m \u001b[43m    \u001b[49m\u001b[43mds_train\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvalidation_data\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mds_val\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m100\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m      5\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mkeras\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcallbacks\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mEarlyStopping\u001b[49m\u001b[43m(\u001b[49m\u001b[43mverbose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpatience\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      6\u001b[0m \u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/keras/utils/traceback_utils.py:65\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/keras/engine/training.py:1606\u001b[0m, in \u001b[0;36mModel.fit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1591\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_eval_data_handler\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1592\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_eval_data_handler \u001b[38;5;241m=\u001b[39m data_adapter\u001b[38;5;241m.\u001b[39mget_data_handler(\n\u001b[1;32m   1593\u001b[0m         x\u001b[38;5;241m=\u001b[39mval_x,\n\u001b[1;32m   1594\u001b[0m         y\u001b[38;5;241m=\u001b[39mval_y,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1604\u001b[0m         steps_per_execution\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_steps_per_execution,\n\u001b[1;32m   1605\u001b[0m     )\n\u001b[0;32m-> 1606\u001b[0m val_logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mevaluate\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1607\u001b[0m \u001b[43m    \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_x\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1608\u001b[0m \u001b[43m    \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_y\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1609\u001b[0m \u001b[43m    \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_sample_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1610\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidation_batch_size\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1611\u001b[0m \u001b[43m    \u001b[49m\u001b[43msteps\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidation_steps\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1612\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcallbacks\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1613\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmax_queue_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmax_queue_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1614\u001b[0m \u001b[43m    \u001b[49m\u001b[43mworkers\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mworkers\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1615\u001b[0m \u001b[43m    \u001b[49m\u001b[43muse_multiprocessing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muse_multiprocessing\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1616\u001b[0m \u001b[43m    \u001b[49m\u001b[43mreturn_dict\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1617\u001b[0m \u001b[43m    \u001b[49m\u001b[43m_use_cached_eval_dataset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1618\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1619\u001b[0m val_logs \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m   1620\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mval_\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m+\u001b[39m name: val \u001b[38;5;28;01mfor\u001b[39;00m name, val \u001b[38;5;129;01min\u001b[39;00m val_logs\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m   1621\u001b[0m }\n\u001b[1;32m   1622\u001b[0m epoch_logs\u001b[38;5;241m.\u001b[39mupdate(val_logs)\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/keras/utils/traceback_utils.py:65\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/keras/engine/training.py:1947\u001b[0m, in \u001b[0;36mModel.evaluate\u001b[0;34m(self, x, y, batch_size, verbose, sample_weight, steps, callbacks, max_queue_size, workers, use_multiprocessing, return_dict, **kwargs)\u001b[0m\n\u001b[1;32m   1943\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mprofiler\u001b[38;5;241m.\u001b[39mexperimental\u001b[38;5;241m.\u001b[39mTrace(\n\u001b[1;32m   1944\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest\u001b[39m\u001b[38;5;124m\"\u001b[39m, step_num\u001b[38;5;241m=\u001b[39mstep, _r\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   1945\u001b[0m ):\n\u001b[1;32m   1946\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_test_batch_begin(step)\n\u001b[0;32m-> 1947\u001b[0m     tmp_logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtest_function\u001b[49m\u001b[43m(\u001b[49m\u001b[43miterator\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1948\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data_handler\u001b[38;5;241m.\u001b[39mshould_sync:\n\u001b[1;32m   1949\u001b[0m         context\u001b[38;5;241m.\u001b[39masync_wait()\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py:915\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    912\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    914\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 915\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    917\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    918\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py:954\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    951\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[1;32m    952\u001b[0m \u001b[38;5;66;03m# In this case we have not created variables on the first call. So we can\u001b[39;00m\n\u001b[1;32m    953\u001b[0m \u001b[38;5;66;03m# run the first trace but we should fail if variables are created.\u001b[39;00m\n\u001b[0;32m--> 954\u001b[0m results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_stateful_fn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    955\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_created_variables \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m ALLOW_DYNAMIC_VARIABLE_CREATION:\n\u001b[1;32m    956\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCreating variables on a non-first call to a function\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    957\u001b[0m                    \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m decorated with tf.function.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/eager/function.py:2496\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2493\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m   2494\u001b[0m   (graph_function,\n\u001b[1;32m   2495\u001b[0m    filtered_flat_args) \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_maybe_define_function(args, kwargs)\n\u001b[0;32m-> 2496\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mgraph_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_flat\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2497\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfiltered_flat_args\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcaptured_inputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgraph_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcaptured_inputs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/eager/function.py:1862\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1858\u001b[0m possible_gradient_type \u001b[38;5;241m=\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[1;32m   1859\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (possible_gradient_type \u001b[38;5;241m==\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[1;32m   1860\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m executing_eagerly):\n\u001b[1;32m   1861\u001b[0m   \u001b[38;5;66;03m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[0;32m-> 1862\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_build_call_outputs(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_inference_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1863\u001b[0m \u001b[43m      \u001b[49m\u001b[43mctx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcancellation_manager\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcancellation_manager\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m   1864\u001b[0m forward_backward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[1;32m   1865\u001b[0m     args,\n\u001b[1;32m   1866\u001b[0m     possible_gradient_type,\n\u001b[1;32m   1867\u001b[0m     executing_eagerly)\n\u001b[1;32m   1868\u001b[0m forward_function, args_with_tangents \u001b[38;5;241m=\u001b[39m forward_backward\u001b[38;5;241m.\u001b[39mforward()\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/eager/function.py:499\u001b[0m, in \u001b[0;36m_EagerDefinedFunction.call\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    497\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _InterpolateFunctionError(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    498\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m cancellation_manager \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 499\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m \u001b[43mexecute\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    500\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msignature\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    501\u001b[0m \u001b[43m        \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_num_outputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    502\u001b[0m \u001b[43m        \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    503\u001b[0m \u001b[43m        \u001b[49m\u001b[43mattrs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    504\u001b[0m \u001b[43m        \u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mctx\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    505\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    506\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute_with_cancellation(\n\u001b[1;32m    507\u001b[0m         \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msignature\u001b[38;5;241m.\u001b[39mname),\n\u001b[1;32m    508\u001b[0m         num_outputs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_outputs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    511\u001b[0m         ctx\u001b[38;5;241m=\u001b[39mctx,\n\u001b[1;32m    512\u001b[0m         cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_manager)\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/eager/execute.py:54\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     53\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 54\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m \u001b[43mpywrap_tfe\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTFE_Py_Execute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_handle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdevice_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mop_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     55\u001b[0m \u001b[43m                                      \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     56\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     57\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    ds_train,\n",
    "    validation_data=ds_val,\n",
    "    epochs=100,\n",
    "    callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=3),\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5211274f-383f-40f2-be96-e020027fa5b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 5 of 8). These functions will not be directly callable after loading.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: /home/han/tmp/cwru/mel/full_domain/{'train': 0.7, 'val': 0.2, 'test': 0.1}/vggish/assets\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: /home/han/tmp/cwru/mel/full_domain/{'train': 0.7, 'val': 0.2, 'test': 0.1}/vggish/assets\n"
     ]
    }
   ],
   "source": [
    "model.save(\"/home/han/tmp/cwru/mel/full_domain/{'train': 0.7, 'val': 0.2, 'test': 0.1}/vggish\")\n",
    "# model = keras.models.load_model('/home/han/tmp/cwru/vggish')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8e444f8f-71a4-4020-a589-270e9a9e5df7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72/72 [==============================] - 1s 13ms/step - loss: 19.4831 - accuracy: 0.0373\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[19.483142852783203, 0.0373263880610466]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(ds_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8490478c-e881-4fc9-a683-e75d59c6d7f5",
   "metadata": {},
   "source": [
    "### Keras implementation with transfer learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "80c5e6e9-5d8e-49ea-b943-86a6d62dbafb",
   "metadata": {},
   "outputs": [],
   "source": [
    "base_model = VGG16(include_top=False, weights='imagenet', input_shape=input_shape, classes=n_classes)\n",
    "\n",
    "base_model.trainable = False\n",
    "\n",
    "inputs = base_model.layers[0].input\n",
    "# layer = keras.layers.BatchNormalization()\n",
    "# layer.build((None, 4))  # Create the weights\n",
    "\n",
    "x = base_model(inputs, training=False)\n",
    "x = keras.layers.Flatten(name=\"flatten\")(x)\n",
    "x = keras.layers.Dense(4096, activation=\"relu\", name=\"fc1\")(x)\n",
    "x = keras.layers.Dense(4096, activation=\"relu\", name=\"fc2\")(x)\n",
    "outputs = keras.layers.Dense(n_classes, activation=None, name=\"predictions\")(x)\n",
    "\n",
    "model = keras.Model(inputs, outputs)\n",
    "\n",
    "from_logits = 'softmax' not in str(model.get_layer('predictions').activation)\n",
    "\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.Adam(),\n",
    "    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=from_logits),\n",
    "    metrics=['accuracy'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2f8354ee-7bf5-49c6-90bc-b5ee6ba6b604",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "176/176 [==============================] - 7s 33ms/step - loss: 2.3229 - accuracy: 0.5872 - val_loss: 0.7620 - val_accuracy: 0.7775\n",
      "Epoch 2/100\n",
      "176/176 [==============================] - 5s 31ms/step - loss: 0.4131 - accuracy: 0.8705 - val_loss: 0.8296 - val_accuracy: 0.8288\n",
      "Epoch 3/100\n",
      "176/176 [==============================] - 5s 30ms/step - loss: 0.2475 - accuracy: 0.9212 - val_loss: 0.4060 - val_accuracy: 0.8631\n",
      "Epoch 4/100\n",
      "176/176 [==============================] - 5s 31ms/step - loss: 0.2428 - accuracy: 0.9272 - val_loss: 0.3971 - val_accuracy: 0.9030\n",
      "Epoch 5/100\n",
      "176/176 [==============================] - 5s 30ms/step - loss: 0.1857 - accuracy: 0.9483 - val_loss: 0.4218 - val_accuracy: 0.8930\n",
      "Epoch 6/100\n",
      "176/176 [==============================] - 5s 31ms/step - loss: 0.1206 - accuracy: 0.9629 - val_loss: 0.1967 - val_accuracy: 0.9486\n",
      "Epoch 7/100\n",
      "176/176 [==============================] - 5s 30ms/step - loss: 0.1582 - accuracy: 0.9615 - val_loss: 0.2690 - val_accuracy: 0.9372\n",
      "Epoch 8/100\n",
      "176/176 [==============================] - 5s 30ms/step - loss: 0.1451 - accuracy: 0.9682 - val_loss: 0.1276 - val_accuracy: 0.9700\n",
      "Epoch 9/100\n",
      "176/176 [==============================] - 5s 30ms/step - loss: 0.0516 - accuracy: 0.9857 - val_loss: 0.3592 - val_accuracy: 0.9387\n",
      "Epoch 10/100\n",
      "176/176 [==============================] - 5s 31ms/step - loss: 0.1675 - accuracy: 0.9533 - val_loss: 0.3362 - val_accuracy: 0.9173\n",
      "Epoch 11/100\n",
      "176/176 [==============================] - 5s 30ms/step - loss: 0.1412 - accuracy: 0.9618 - val_loss: 0.2390 - val_accuracy: 0.9401\n",
      "Epoch 11: early stopping\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    ds_train,\n",
    "    validation_data=ds_val,\n",
    "    epochs=100,\n",
    "    callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=3),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "06f79296-3a90-47e5-ba61-815507251d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72/72 [==============================] - 1s 19ms/step - loss: 1.2981 - accuracy: 0.7509\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.2981183528900146, 0.7508680820465088]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(ds_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b316752-79c6-4095-b963-3de3ad35862a",
   "metadata": {},
   "source": [
    "#### Fine tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "10b97f80-0af9-4ee6-a943-1ae9658be30e",
   "metadata": {},
   "outputs": [],
   "source": [
    "base_model.trainable = True\n",
    "\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.Adam(1e-5),\n",
    "    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=from_logits),\n",
    "    metrics=['accuracy'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "4fc06497-9ce1-4ca9-aa9d-9f68500eea2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "175/176 [============================>.] - ETA: 0s - loss: 0.1427 - accuracy: 0.9643"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-11 16:49:22.584524: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 592.09MiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.584553: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 592.09MiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.604379: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 604.38MiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.604404: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 604.38MiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.604412: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 1.09GiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.604419: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 1.09GiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.627081: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 592.38MiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.627108: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 592.38MiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.647408: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 604.38MiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n",
      "2022-10-11 16:49:22.647435: W tensorflow/core/common_runtime/bfc_allocator.cc:290] Allocator (GPU_0_bfc) ran out of memory trying to allocate 604.38MiB with freed_by_count=0. The caller indicates that this is not a failure, but this may mean that there could be performance gains if more memory were available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "176/176 [==============================] - 14s 74ms/step - loss: 0.1426 - accuracy: 0.9643 - val_loss: 0.4175 - val_accuracy: 0.8859\n",
      "Epoch 2/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 0.1083 - accuracy: 0.9732 - val_loss: 0.0569 - val_accuracy: 0.9729\n",
      "Epoch 3/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 0.0070 - accuracy: 0.9982 - val_loss: 0.0584 - val_accuracy: 0.9843\n",
      "Epoch 4/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 0.0053 - accuracy: 0.9982 - val_loss: 0.0297 - val_accuracy: 0.9914\n",
      "Epoch 5/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 1.6118e-04 - accuracy: 1.0000 - val_loss: 0.0298 - val_accuracy: 0.9914\n",
      "Epoch 6/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 8.1208e-05 - accuracy: 1.0000 - val_loss: 0.0282 - val_accuracy: 0.9914\n",
      "Epoch 7/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 6.6796e-05 - accuracy: 1.0000 - val_loss: 0.0271 - val_accuracy: 0.9914\n",
      "Epoch 8/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 5.6307e-05 - accuracy: 1.0000 - val_loss: 0.0264 - val_accuracy: 0.9914\n",
      "Epoch 9/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 4.8071e-05 - accuracy: 1.0000 - val_loss: 0.0259 - val_accuracy: 0.9929\n",
      "Epoch 10/10\n",
      "176/176 [==============================] - 12s 70ms/step - loss: 4.1348e-05 - accuracy: 1.0000 - val_loss: 0.0256 - val_accuracy: 0.9929\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    ds_train,\n",
    "    validation_data=ds_val,\n",
    "    epochs=10,\n",
    "    callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=3),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "567c287d-53f7-4894-9466-430f4c94bcea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72/72 [==============================] - 1s 20ms/step - loss: 0.4811 - accuracy: 0.9019\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.4811398684978485, 0.9019097089767456]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(ds_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "293afd3a-988f-4e94-a854-dcc6740dc222",
   "metadata": {},
   "source": [
    "# EOF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "dc985665-8cee-4a26-b039-6c6c2278e272",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1730}"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = []\n",
    "\n",
    "for x in dw_split['test']:\n",
    "    # b = preprocessor.label_dict[x['label'].numpy().decode()]\n",
    "    a.append(x['metadata']['RPM_Nominal'].numpy())\n",
    "\n",
    "set(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ab7713e8-f192-4c75-8c8b-b780e1e3879d",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = preprocessor._transformer.dataset_windows\n",
    "\n",
    "x = takesample(ds)['feature'].numpy()\n",
    "\n",
    "# x[0]\n",
    "plt.imshow(x[0])\n",
    "\n",
    "\n",
    "# x[0]\n",
    "plt.imshow(x[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "e818bbd3-c68c-484a-8cf3-1e2fda97fafe",
   "metadata": {},
   "outputs": [],
   "source": [
    "lbs = np.random.randint(0,10,1000)\n",
    "\n",
    "dd = {'label': lbs,\n",
    "      'value': [10*l+np.random.randint(10) for l in lbs]\n",
    "     }\n",
    "df = tf.data.Dataset.from_tensor_slices(dd)\n",
    "\n",
    "# takesample(df)\n",
    "\n",
    "dc = utils.extract_by_category(df, labels=set(lbs))\n",
    "\n",
    "# utils.get_dataset_size(dc[1])\n",
    "\n",
    "dfs=utils.split_dataset(df, labels=set(lbs))\n",
    "\n",
    "for n in set(lbs):\n",
    "    print(n,utils.get_dataset_size(dc[n]))\n",
    "\n",
    "dff = lambda n:dfs['train'].filter(lambda x:tf.equal(x['label'],n))\n",
    "\n",
    "n=9\n",
    "utils.get_dataset_size(dff(n))/utils.get_dataset_size(dc[n])\n",
    "\n",
    "np.asarray([x['value'].numpy() for x in dc[0]])\n",
    "\n",
    "np.asarray([x['value'].numpy() for x in dff(0)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ff13fb32-0276-4654-91f2-3d8595f045bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for x in dfs['train']:\n",
    "#     print(x)\n",
    "\n",
    "# takesample(dfs['val'])\n",
    "\n",
    "# assert (a=1) >0\n",
    "\n",
    "# # dw_cat = utils.extract_by_category(dw, labels)\n",
    "\n",
    "# # dw_cat_size = {k: utils.get_dataset_size(v) for k,v in dw_cat.items()}\n",
    "\n",
    "# # dp_cat = {}\n",
    "# # for k,v in dw_cat.items():\n",
    "# #     dp_cat[k] = utils.random_split_dataset(v, splits)\n",
    "\n",
    "# # V = {'train':[], 'val':[]}\n",
    "\n",
    "# # for k,v in dp_cat.items():\n",
    "# #     for s in splits.keys():\n",
    "# #         V[s].append(v[s])\n",
    "\n",
    "# # train_size = [utils.get_dataset_size(v) for v in V['train']]\n",
    "\n",
    "# # v0 = V['train'][0]\n",
    "# # for v in V['train'][1:]:\n",
    "# #     v0 = v.concatenate(v0)\n",
    "\n",
    "# # tf.data.Dataset.concatenate?\n",
    "\n",
    "# # utils.get_dataset_size(v0)\n",
    "\n",
    "# # vc = tf.data.Dataset.reduce(v0, tf.data.Dataset.concatenate)\n",
    "\n",
    "# # np.sum(train_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8a139a4-8d55-4b8b-954b-b4d801fa8162",
   "metadata": {},
   "source": [
    "#### Statistics on the training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "59b4b594-7f21-4669-a5f5-59f8162070b6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "counter = {}\n",
    "\n",
    "for x,l in ds_split['train']:\n",
    "    # d = x['metadata']['RPM_Nominal'].numpy()\n",
    "    try:\n",
    "        counter[l.numpy()] += 1\n",
    "    except:\n",
    "        counter[l.numpy()] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "16c54226-426f-4388-8a8e-2827d2dc5624",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "counterv = {}\n",
    "\n",
    "for x,l in ds_split['val']:\n",
    "    try:\n",
    "        counterv[l.numpy()] += 1\n",
    "    except:\n",
    "        counterv[l.numpy()] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ef7d68e0-b933-4815-85a3-ff7d1a17dbf5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{12: 119,\n",
       " 7: 114,\n",
       " 13: 104,\n",
       " 11: 112,\n",
       " 1: 117,\n",
       " 14: 126,\n",
       " 3: 115,\n",
       " 18: 110,\n",
       " 24: 112,\n",
       " 2: 113,\n",
       " 9: 112,\n",
       " 26: 118,\n",
       " 21: 118,\n",
       " 25: 116,\n",
       " 23: 109,\n",
       " 17: 121,\n",
       " 20: 115,\n",
       " 28: 80,\n",
       " 10: 113,\n",
       " 19: 113,\n",
       " 4: 117,\n",
       " 29: 114,\n",
       " 6: 115,\n",
       " 5: 41,\n",
       " 15: 117,\n",
       " 22: 42}"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "aef61c77-7fd8-4716-a63e-469cc85759a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{9: 32,\n",
       " 1: 27,\n",
       " 21: 26,\n",
       " 29: 30,\n",
       " 18: 34,\n",
       " 13: 40,\n",
       " 19: 31,\n",
       " 4: 27,\n",
       " 24: 32,\n",
       " 23: 35,\n",
       " 10: 31,\n",
       " 12: 25,\n",
       " 3: 29,\n",
       " 17: 23,\n",
       " 6: 29,\n",
       " 15: 27,\n",
       " 28: 16,\n",
       " 14: 18,\n",
       " 11: 32,\n",
       " 20: 29,\n",
       " 25: 28,\n",
       " 26: 26,\n",
       " 2: 31,\n",
       " 7: 30,\n",
       " 5: 7,\n",
       " 22: 6}"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counterv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "4e0e1618-5a83-4247-869e-65e293c17c9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{12: 115,\n",
       " 28: 76,\n",
       " 9: 115,\n",
       " 7: 115,\n",
       " 23: 115,\n",
       " 17: 115,\n",
       " 6: 115,\n",
       " 22: 38,\n",
       " 2: 115,\n",
       " 10: 115,\n",
       " 25: 115,\n",
       " 29: 115,\n",
       " 20: 115,\n",
       " 18: 115,\n",
       " 21: 115,\n",
       " 5: 38,\n",
       " 19: 115,\n",
       " 1: 115,\n",
       " 4: 115,\n",
       " 13: 115,\n",
       " 24: 115,\n",
       " 11: 115,\n",
       " 26: 115,\n",
       " 15: 115,\n",
       " 3: 115,\n",
       " 14: 115}"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e24d0e90-1d3e-4a4f-a802-03407ac774d8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "counter = {}\n",
    "\n",
    "for x in dw_split['train']:\n",
    "    d = x['metadata']['RPM_Nominal'].numpy()\n",
    "    l = x['label'].numpy()\n",
    "    try:\n",
    "        counter[(d,l)] += 1\n",
    "    except:\n",
    "        counter[(d,l)] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "907faac5-4f58-4abb-9760-1a613f4098e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = list(preprocessor._compactor.label_dict.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9bb7742d-c91f-4a19-9425-f33647137591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "919b97a8-3699-4313-981d-860492fe8d77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set([k[1].decode() for k in ks]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "977efa4f-7af2-46ca-8fe3-911b164dcdff",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ks = list(counter.keys())\n",
    "ks.sort()\n",
    "# {k:counter[k] for k in ks}\n",
    "\n",
    "# counter\n",
    "\n",
    "# All categories are present\n",
    "assert len(set([k[1].decode() for k in ks])) == len(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e2642965-ae0f-470b-94a7-05e04f4f7538",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{b'04941fdafbda3fa5ad70767533d38dea': 115,\n",
       " b'10d51e0caf5f4ff67ae428bcf1a0bb02': 115,\n",
       " b'19b7c8c9fce8e40a7221ddf4f84640b4': 115,\n",
       " b'1f9da2022a7ca270a5edb1338a61dc2c': 115,\n",
       " b'2c9f2adcfa88b11f689fabbe90bb8816': 115,\n",
       " b'42be485ad63a6716ac3f70ba720eb6ed': 115,\n",
       " b'445d82dca0a6030521a68a7599293f82': 115,\n",
       " b'4b9452e74d31f6871c4c6f0432da3cf7': 115,\n",
       " b'53138cc859e723ee5b8ce50cc3acf7aa': 115,\n",
       " b'6607c34e4480ce5df6afa2aa943bf26b': 115,\n",
       " b'6a669739e6fdfa4401bf3f70c5d9e323': 115,\n",
       " b'758085eb101c295ef02a13c183f790c9': 115,\n",
       " b'7e297d6fada7128dffd8021c1d372379': 115,\n",
       " b'894b6e49c21fd1195d42263030a82edf': 115,\n",
       " b'921c54c70985c1fe783d04a4ecbceaa9': 115,\n",
       " b'9b317898b4deeede89881a2d0918675b': 115,\n",
       " b'a126b311fbbf434ba935092728125ae6': 115,\n",
       " b'aa676c6c35719402705d330358031eb8': 115,\n",
       " b'ada901bdb3d7092c229e47ff7ecb1728': 115,\n",
       " b'ca79b89cde83eaa59f650367c712973d': 115,\n",
       " b'd39d89316ed238037e7a5c5dc087dd9e': 115,\n",
       " b'ecb9fb8914e2ee54ced2e35b853a1be4': 115,\n",
       " b'f9b9bb12c159f3d673b064486cb8a842': 76,\n",
       " b'faff6146cb9d081a2def0e82365aa6f5': 115,\n",
       " b'7b612e85b5b49616590fee9758170c94': 38,\n",
       " b'f15c0cd7bb0d2e2a384027aecfbbde9c': 38}"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aa = {}\n",
    "for k in ks:\n",
    "    try:\n",
    "        aa[k[1].decode()].append(k[0])\n",
    "    except:\n",
    "        aa[k[1].decode()] = [k[0]]\n",
    "\n",
    "# [len([k[1] for k in ks if k[0]==lf]) for lf in [1797, 1772, 1750, 1730]]\n",
    "\n",
    "dm = {}\n",
    "\n",
    "for k in ks:\n",
    "    try:\n",
    "        dm[k[1]][k[0]] += counter[(k[0],k[1])]\n",
    "    except:\n",
    "        try:\n",
    "            dm[k[1]][k[0]] = counter[(k[0],k[1])]\n",
    "        except:\n",
    "            dm[k[1]] = {k[0]: counter[(k[0],k[1])]}\n",
    "\n",
    "{k: np.sum(list(v.values())) for k,v in dm.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5a386588-3e2a-453b-a084-9760c1fda40c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'04941fdafbda3fa5ad70767533d38dea': [1750, 1772, 1797],\n",
       " '10d51e0caf5f4ff67ae428bcf1a0bb02': [1750, 1772, 1797],\n",
       " '19b7c8c9fce8e40a7221ddf4f84640b4': [1750, 1772, 1797],\n",
       " '1f9da2022a7ca270a5edb1338a61dc2c': [1750, 1772, 1797],\n",
       " '2c9f2adcfa88b11f689fabbe90bb8816': [1750, 1772, 1797],\n",
       " '42be485ad63a6716ac3f70ba720eb6ed': [1750, 1772, 1797],\n",
       " '445d82dca0a6030521a68a7599293f82': [1750, 1772, 1797],\n",
       " '4b9452e74d31f6871c4c6f0432da3cf7': [1750, 1772, 1797],\n",
       " '53138cc859e723ee5b8ce50cc3acf7aa': [1750, 1772, 1797],\n",
       " '6607c34e4480ce5df6afa2aa943bf26b': [1750, 1772, 1797],\n",
       " '6a669739e6fdfa4401bf3f70c5d9e323': [1750, 1772, 1797],\n",
       " '758085eb101c295ef02a13c183f790c9': [1750, 1772, 1797],\n",
       " '7e297d6fada7128dffd8021c1d372379': [1750, 1772, 1797],\n",
       " '894b6e49c21fd1195d42263030a82edf': [1750, 1772, 1797],\n",
       " '921c54c70985c1fe783d04a4ecbceaa9': [1750, 1772, 1797],\n",
       " '9b317898b4deeede89881a2d0918675b': [1750, 1772, 1797],\n",
       " 'a126b311fbbf434ba935092728125ae6': [1750, 1772, 1797],\n",
       " 'aa676c6c35719402705d330358031eb8': [1750, 1772, 1797],\n",
       " 'ada901bdb3d7092c229e47ff7ecb1728': [1750, 1772, 1797],\n",
       " 'ca79b89cde83eaa59f650367c712973d': [1750, 1772, 1797],\n",
       " 'd39d89316ed238037e7a5c5dc087dd9e': [1750, 1772, 1797],\n",
       " 'ecb9fb8914e2ee54ced2e35b853a1be4': [1750, 1772, 1797],\n",
       " 'f9b9bb12c159f3d673b064486cb8a842': [1750, 1772],\n",
       " 'faff6146cb9d081a2def0e82365aa6f5': [1750, 1772, 1797],\n",
       " '7b612e85b5b49616590fee9758170c94': [1797],\n",
       " 'f15c0cd7bb0d2e2a384027aecfbbde9c': [1797]}"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f0061c9-f239-423e-b96c-f8b6df0a62ac",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "046fc477-f53c-47ee-94e0-af3c56837d00",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # step 1: compact & split\n",
    "# compactor = cwru.DatasetCompactor(ds0,\n",
    "#                                   # filters={'LoadForce': [0,1,2,3]}, \n",
    "#                                   n_trunk=n_trunk,\n",
    "#                                   keys=keys, channels=channels, \n",
    "#                                   # resampling_rate=12000,\n",
    "#                                  )\n",
    "\n",
    "# labels = compactor.label_dict.keys()\n",
    "# splits = {'train':0.7, 'val':0.2, 'test':0.1}\n",
    "# # splits = {'train':1.}\n",
    "\n",
    "# %time ds_split = utils.split_dataset(compactor.dataset, splits, labels=labels, reshuffle_each_iteration=False)\n",
    "\n",
    "# # print(utils.get_dataset_size(compactor.dataset))\n",
    "\n",
    "# # for k, ds in ds_split.items():\n",
    "# #     print(k, utils.get_dataset_size(ds))    \n",
    "\n",
    "# # step 2: feature transform\n",
    "# # df_split = {}\n",
    "# dw_split = {}\n",
    "\n",
    "# for k, ds in ds_split.items():\n",
    "#     transformer = cwru.FeatureTransformer(ds, extractor,                                     \n",
    "#                                         window_shape=window_shape, downsample=downsample)                                    \n",
    "#     # df_split[k] = transformer.dataset_feature\n",
    "#     dw_split[k] = transformer.dataset_windows\n",
    "\n",
    "# # for k, ds in df_split.items():\n",
    "# #     print(k, utils.get_dataset_size(ds))    \n",
    "\n",
    "# # # shoud give the same ratio as defined in `splits`\n",
    "# # for k, ds in dw_split.items():\n",
    "# #     print(k, utils.get_dataset_size(ds))    \n",
    "\n",
    "# # export the feature-transformed dataset for reuse.\n",
    "# for k,v in dw_split.items():\n",
    "#     v.save(str(outdir/'full_domain'/str(splits)/k))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80697865-1ca8-475c-904c-7af7d19571e8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2a08bcc-8ba5-4d24-bd73-cfda6ac5cc18",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "39abe415-f00e-4663-9f6d-b966b913c7b2",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-09 10:08:44.252376: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n"
     ]
    },
    {
     "ename": "InvalidArgumentError",
     "evalue": "{{function_node __wrapped__IteratorGetNext_output_types_6_device_/job:localhost/replica:0/task:0/device:CPU:0}} ValueError: window shape cannot be larger than input array shape\nTraceback (most recent call last):\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n    return func(device, token, args)\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n    outputs = self._call(device, args)\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n    ret = self._func(*args)\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n    return func(*args, **kwargs)\n\n  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n    return _call_unconverted(f, args, kwargs, options, False)\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n    return f(*args)\n\n  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n\n  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n    raise ValueError(\n\nValueError: window shape cannot be larger than input array shape\n\n\n\t [[{{node EagerPyFunc}}]] [Op:IteratorGetNext]",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "Input \u001b[0;32mIn [13]\u001b[0m, in \u001b[0;36m<cell line: 20>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m splits \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtrain\u001b[39m\u001b[38;5;124m'\u001b[39m:\u001b[38;5;241m0.2\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mval\u001b[39m\u001b[38;5;124m'\u001b[39m:\u001b[38;5;241m0.7\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtest\u001b[39m\u001b[38;5;124m'\u001b[39m:\u001b[38;5;241m0.1\u001b[39m}\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# sp_kwargs = {\u001b[39;00m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;66;03m#     'shuffle_size': 1,\u001b[39;00m\n\u001b[1;32m     17\u001b[0m \u001b[38;5;66;03m#     'reshuffle_each_iteration': False,\u001b[39;00m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;66;03m# }\u001b[39;00m\n\u001b[0;32m---> 20\u001b[0m dw_split \u001b[38;5;241m=\u001b[39m \u001b[43mpreprocessing\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwav2feature_pipeline\u001b[49m\u001b[43m(\u001b[49m\u001b[43mds0\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mcwru\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mextractor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\n\u001b[1;32m     21\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43mdc_kwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdc_kwargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mft_kwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mft_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     22\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43msplits\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msplits\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msp_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mfewshot\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     24\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m k,v \u001b[38;5;129;01min\u001b[39;00m dw_split\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m     25\u001b[0m     v\u001b[38;5;241m.\u001b[39msave(\u001b[38;5;28mstr\u001b[39m(outdir\u001b[38;5;241m/\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfull_domain\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;241m/\u001b[39m\u001b[38;5;28mstr\u001b[39m(splits)\u001b[38;5;241m/\u001b[39mk))\n",
      "File \u001b[0;32m~/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py:381\u001b[0m, in \u001b[0;36mwav2feature_pipeline\u001b[0;34m(dataset, module_name, extractor, dc_kwargs, ft_kwargs, splits, sp_mode, sp_kwargs)\u001b[0m\n\u001b[1;32m    379\u001b[0m     transformer \u001b[38;5;241m=\u001b[39m module\u001b[38;5;241m.\u001b[39mFeatureTransformer(ds, extractor, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mft_kwargs)\n\u001b[1;32m    380\u001b[0m     \u001b[38;5;66;03m# df_split[k] = transformer.dataset_feature\u001b[39;00m\n\u001b[0;32m--> 381\u001b[0m     dw_split[k] \u001b[38;5;241m=\u001b[39m \u001b[43mtransformer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdataset_windows\u001b[49m\n\u001b[1;32m    383\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m dw_split\n",
      "File \u001b[0;32m~/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py:220\u001b[0m, in \u001b[0;36mAbstractFeatureTransformer.dataset_windows\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    216\u001b[0m \u001b[38;5;129m@property\u001b[39m\n\u001b[1;32m    217\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdataset_windows\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    218\u001b[0m   \u001b[38;5;124;03m\"\"\"Windowed view of the feature dataset.\u001b[39;00m\n\u001b[1;32m    219\u001b[0m \u001b[38;5;124;03m  \"\"\"\u001b[39;00m\n\u001b[0;32m--> 220\u001b[0m   ds \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto_windows\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdataset_feature\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_window_shape\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_downsample\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    221\u001b[0m   ds\u001b[38;5;241m.\u001b[39m__dpmhm_class__ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\n\u001b[1;32m    222\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m ds\n",
      "File \u001b[0;32m~/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py:326\u001b[0m, in \u001b[0;36mAbstractFeatureTransformer.to_windows\u001b[0;34m(cls, dataset, window_shape, downsample)\u001b[0m\n\u001b[1;32m    318\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m _get_generator\n\u001b[1;32m    320\u001b[0m ds \u001b[38;5;241m=\u001b[39m dataset\u001b[38;5;241m.\u001b[39mmap(\u001b[38;5;28;01mlambda\u001b[39;00m X: (X[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlabel\u001b[39m\u001b[38;5;124m'\u001b[39m], X[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m'\u001b[39m], tf\u001b[38;5;241m.\u001b[39mpy_function(\n\u001b[1;32m    321\u001b[0m   func\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m S: _slider(S\u001b[38;5;241m.\u001b[39mnumpy(), window_shape, downsample),\n\u001b[1;32m    322\u001b[0m   inp\u001b[38;5;241m=\u001b[39m[X[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfeature\u001b[39m\u001b[38;5;124m'\u001b[39m]],\n\u001b[1;32m    323\u001b[0m   Tout\u001b[38;5;241m=\u001b[39mtf\u001b[38;5;241m.\u001b[39mfloat64)),\n\u001b[1;32m    324\u001b[0m   num_parallel_calls\u001b[38;5;241m=\u001b[39mtf\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39mAUTOTUNE)\n\u001b[0;32m--> 326\u001b[0m tensor_shape \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtuple\u001b[39m(\u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mds\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtake\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m3\u001b[39m:])  \u001b[38;5;66;03m# drop the first two dimensions of sliding view\u001b[39;00m\n\u001b[1;32m    328\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39mDataset\u001b[38;5;241m.\u001b[39mfrom_generator(_generator(ds),\n\u001b[1;32m    329\u001b[0m   output_signature\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mcls\u001b[39m\u001b[38;5;241m.\u001b[39mget_output_signature(tensor_shape)\n\u001b[1;32m    330\u001b[0m   \u001b[38;5;66;03m# https://www.tensorflow.org/api_docs/python/tf/data/Dataset#from_generator\u001b[39;00m\n\u001b[1;32m    331\u001b[0m   \u001b[38;5;66;03m# output_types=(tf.string, tf.string, tf.float64))  # not recommended\u001b[39;00m\n\u001b[1;32m    332\u001b[0m )\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/data/ops/iterator_ops.py:766\u001b[0m, in \u001b[0;36mOwnedIterator.__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    764\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__next__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    765\u001b[0m   \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 766\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_next_internal\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    767\u001b[0m   \u001b[38;5;28;01mexcept\u001b[39;00m errors\u001b[38;5;241m.\u001b[39mOutOfRangeError:\n\u001b[1;32m    768\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mStopIteration\u001b[39;00m\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/data/ops/iterator_ops.py:749\u001b[0m, in \u001b[0;36mOwnedIterator._next_internal\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    746\u001b[0m \u001b[38;5;66;03m# TODO(b/77291417): This runs in sync mode as iterators use an error status\u001b[39;00m\n\u001b[1;32m    747\u001b[0m \u001b[38;5;66;03m# to communicate that there is no more data to iterate over.\u001b[39;00m\n\u001b[1;32m    748\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m context\u001b[38;5;241m.\u001b[39mexecution_mode(context\u001b[38;5;241m.\u001b[39mSYNC):\n\u001b[0;32m--> 749\u001b[0m   ret \u001b[38;5;241m=\u001b[39m \u001b[43mgen_dataset_ops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43miterator_get_next\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    750\u001b[0m \u001b[43m      \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_iterator_resource\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    751\u001b[0m \u001b[43m      \u001b[49m\u001b[43moutput_types\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_flat_output_types\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    752\u001b[0m \u001b[43m      \u001b[49m\u001b[43moutput_shapes\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_flat_output_shapes\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    754\u001b[0m   \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    755\u001b[0m     \u001b[38;5;66;03m# Fast path for the case `self._structure` is not a nested structure.\u001b[39;00m\n\u001b[1;32m    756\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_element_spec\u001b[38;5;241m.\u001b[39m_from_compatible_tensor_list(ret)  \u001b[38;5;66;03m# pylint: disable=protected-access\u001b[39;00m\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/gen_dataset_ops.py:3017\u001b[0m, in \u001b[0;36miterator_get_next\u001b[0;34m(iterator, output_types, output_shapes, name)\u001b[0m\n\u001b[1;32m   3015\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m _result\n\u001b[1;32m   3016\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m _core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m-> 3017\u001b[0m   \u001b[43m_ops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraise_from_not_ok_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43me\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3018\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m _core\u001b[38;5;241m.\u001b[39m_FallbackException:\n\u001b[1;32m   3019\u001b[0m   \u001b[38;5;28;01mpass\u001b[39;00m\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/framework/ops.py:7209\u001b[0m, in \u001b[0;36mraise_from_not_ok_status\u001b[0;34m(e, name)\u001b[0m\n\u001b[1;32m   7207\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mraise_from_not_ok_status\u001b[39m(e, name):\n\u001b[1;32m   7208\u001b[0m   e\u001b[38;5;241m.\u001b[39mmessage \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m name: \u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m+\u001b[39m name \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m-> 7209\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_status_to_exception(e) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28mNone\u001b[39m\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m: {{function_node __wrapped__IteratorGetNext_output_types_6_device_/job:localhost/replica:0/task:0/device:CPU:0}} ValueError: window shape cannot be larger than input array shape\nTraceback (most recent call last):\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n    return func(device, token, args)\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n    outputs = self._call(device, args)\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n    ret = self._func(*args)\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n    return func(*args, **kwargs)\n\n  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n    return _call_unconverted(f, args, kwargs, options, False)\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n    return f(*args)\n\n  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n\n  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n\n  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n    raise ValueError(\n\nValueError: window shape cannot be larger than input array shape\n\n\n\t [[{{node EagerPyFunc}}]] [Op:IteratorGetNext]"
     ]
    }
   ],
   "source": [
    "dc_kwargs = {\n",
    "    'n_trunk': n_trunk,\n",
    "    'keys': keys,\n",
    "    'channels': channels,\n",
    "    # 'filters': {'LoadForce': [0,1,2]}\n",
    "}\n",
    "\n",
    "ft_kwargs = {\n",
    "    'window_shape': window_shape,\n",
    "    'downsample': downsample\n",
    "}\n",
    "\n",
    "splits = {'train':0.2, 'val':0.7, 'test':0.1}\n",
    "\n",
    "# sp_kwargs = {\n",
    "#     'shuffle_size': 1,\n",
    "#     'reshuffle_each_iteration': False,\n",
    "# }\n",
    "\n",
    "dw_split = preprocessing.wav2feature_pipeline(ds0, 'cwru', extractor, \n",
    "                                  dc_kwargs=dc_kwargs, ft_kwargs=ft_kwargs,\n",
    "                                  splits=splits, sp_mode='fewshot')\n",
    "\n",
    "for k,v in dw_split.items():\n",
    "    v.save(str(outdir/'full_domain'/str(splits)/k))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae5a6429-c98d-4a55-ac43-b2626a900f68",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-09 10:08:44.603990: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.604604: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.609484: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.611388: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.611988: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.612233: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.613171: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.615108: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.615548: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.616806: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.619712: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.626576: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.633616: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.635472: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.635911: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n",
      "2022-10-09 10:08:44.643701: W tensorflow/core/framework/op_kernel.cc:1768] INVALID_ARGUMENT: ValueError: window shape cannot be larger than input array shape\n",
      "Traceback (most recent call last):\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 269, in __call__\n",
      "    return func(device, token, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 147, in __call__\n",
      "    outputs = self._call(device, args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/ops/script_ops.py\", line 154, in _call\n",
      "    ret = self._func(*args)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 642, in wrapper\n",
      "    return func(*args, **kwargs)\n",
      "\n",
      "  File \"/tmp/__autograph_generated_filei8qexo52.py\", line 8, in <lambda>\n",
      "    tf__lam = (lambda X: ag__.with_function_scope((lambda lscope: (X['label'], X['metadata'], ag__.converted_call(tf.py_function, (), dict(func=ag__.autograph_artifact((lambda S: ag__.converted_call(_slider, (ag__.converted_call(S.numpy, (), None, lscope), window_shape, downsample), None, lscope))), inp=[X['feature']], Tout=tf.float64), lscope))), 'lscope', ag__.STD))\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 335, in converted_call\n",
      "    return _call_unconverted(f, args, kwargs, options, False)\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/autograph/impl/api.py\", line 459, in _call_unconverted\n",
      "    return f(*args)\n",
      "\n",
      "  File \"/home/han/Projects/HIASCI/Codes/dpmhm/dpmhm/datasets/preprocessing.py\", line 301, in _slider\n",
      "    return  sliding_window_view(S, (S.shape[0], *ws))[0, ::ds[0], ::ds[1]]\n",
      "\n",
      "  File \"<__array_function__ internals>\", line 5, in sliding_window_view\n",
      "\n",
      "  File \"/home/han/.conda/envs/dev38/lib/python3.8/site-packages/numpy/lib/stride_tricks.py\", line 331, in sliding_window_view\n",
      "    raise ValueError(\n",
      "\n",
      "ValueError: window shape cannot be larger than input array shape\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dw_split = {}\n",
    "\n",
    "# for p in (outdir/'full_domain'/\"{'train': 0.2, 'val': 0.7, 'test': 0.1}\").iterdir():\n",
    "for p in (outdir/'full_domain'/str(splits)).iterdir():\n",
    "    dw_split[p.name] = tf.data.Dataset.load(str(p))           \n",
    "\n",
    "# Loading from files makes the size information available \n",
    "for k, ds in dw_split.items():\n",
    "    print(k, utils.get_dataset_size(ds))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d4fc7a4-fd2d-41b2-983e-3490168fae7e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95e05480-23c3-495c-be43-39ca59d587b0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2371842-cd5f-4b0d-a6cd-9d516e8a07c5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "020cb535-76ae-4e21-a9aa-d7d6f9f1d9b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "dw.save(str(outdir/'frames_target_domain'))\n",
    "dw.save(str(outdir/'partial_domain'/str(splits)/'test'))    \n",
    "dw = tf.data.Dataset.load(str(outdir/'frames_target_domain'))\n",
    "# dw_split[p.name] = tf.data.Dataset.load(str(p))      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "688b8771-0020-4371-84df-f12ee29ff70b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6555c3da-b992-4903-a0b5-d498e2d7017e",
   "metadata": {},
   "outputs": [],
   "source": [
    "for k,v in dw_split.items():\n",
    "    v.save(str(outdir/'partial_domain'/str(splits)/k))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c3eb51a8-c098-4c9c-baed-32cdee45caa5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val 1623\n",
      "train 459\n",
      "test 246\n"
     ]
    }
   ],
   "source": [
    "dw_split = {}\n",
    "\n",
    "for p in (outdir/'partial_domain'/str(splits)).iterdir():\n",
    "    dw_split[p.name] = tf.data.Dataset.load(str(p))      \n",
    "    \n",
    "# Loading from files makes the size information available \n",
    "for k, ds in dw_split.items():\n",
    "    print(k, len(ds))        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bc962689-c485-4907-a6a8-9d522a68fdce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Target domain\n",
    "\n",
    "dc_kwargs = {\n",
    "    # 'n_trunk': 1,\n",
    "    'keys': keys,\n",
    "    'channels': channels,\n",
    "    'filters': {'LoadForce': [3]}\n",
    "}\n",
    "\n",
    "ft_kwargs = {\n",
    "    'window_shape': window_shape,\n",
    "    'downsample': downsample\n",
    "}\n",
    "\n",
    "dw = preprocessing.wav2feature_pipeline(ds0, 'cwru', extractor, dc_kwargs=dc_kwargs, ft_kwargs=ft_kwargs)\n",
    "\n",
    "dw.save(str(outdir/'frames_target_domain'))\n",
    "dw.save(str(outdir/'partial_domain'/str(splits)/'test'))    \n",
    "dw = tf.data.Dataset.load(str(outdir/'frames_target_domain'))\n",
    "# dw_split[p.name] = tf.data.Dataset.load(str(p))      \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e46132c6-4699-4164-b9ab-3ddf78d49fff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# splits = {'train':0.2, 'test':0.8}\n",
    "\n",
    "sp_kwargs = {\n",
    "    'shuffle_size': None,\n",
    "    'reshuffle_each_iteration': False,\n",
    "}\n",
    "\n",
    "dw_split = utils.split_dataset(dw, splits, labels=label_dict.keys(), **sp_kwargs)\n",
    "\n",
    "for k,v in dw_split.items():\n",
    "    v.save(str(outdir/'partial_domain'/str(splits)/k))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7360872c-a360-466c-aba4-ab3c71700cc7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val 1623\n",
      "train 459\n",
      "test 246\n"
     ]
    }
   ],
   "source": [
    "dw_split = {}\n",
    "\n",
    "for p in (outdir/'partial_domain'/str(splits)).iterdir():\n",
    "    dw_split[p.name] = tf.data.Dataset.load(str(p))      \n",
    "    \n",
    "# Loading from files makes the size information available \n",
    "for k, ds in dw_split.items():\n",
    "    print(k, len(ds))        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "feceb84a-3b5a-4035-9f10-b4d6dffd6770",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a38ad42-e525-42d8-83a4-c8525d21c0a2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0389dfcd-e5c9-489f-905c-b647c9793eb0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "64acf1dc-0cc5-4552-9c1b-bdbfaf489759",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Source domain\n",
    "\n",
    "dc_kwargs = {\n",
    "    'n_trunk': n_trunk,\n",
    "    'keys': keys,\n",
    "    'channels': channels,\n",
    "    # 'filters': {'LoadForce': [0,1,2]}\n",
    "}\n",
    "\n",
    "ft_kwargs = {\n",
    "    'window_shape': window_shape,\n",
    "    'downsample': downsample\n",
    "}\n",
    "\n",
    "# sp_kwargs = {\n",
    "#     'shuffle_size': 1,\n",
    "#     'reshuffle_each_iteration': False,\n",
    "# }\n",
    "\n",
    "dw_split = preprocessing.pipeline(ds0, 'cwru', extractor, \n",
    "                                  dc_kwargs=dc_kwargs, ft_kwargs=ft_kwargs,\n",
    "                                  splits=splits, sp_mode='uniform')\n",
    "\n",
    "for k,v in dw_split.items():\n",
    "    v.save(str(outdir/'partial_domain'/str(splits)/k))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "459e22c0-d915-40b4-b9f3-2e8e7e3590f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Target domain\n",
    "\n",
    "dc_kwargs = {\n",
    "    'n_trunk': n_trunk,\n",
    "    'keys': keys,\n",
    "    'channels': channels,\n",
    "    'filters': {'LoadForce': [3]}\n",
    "}\n",
    "\n",
    "# splits = {'train':0.2, 'test':0.8}\n",
    "# splits = {'test': 1.}\n",
    "\n",
    "dw = preprocessing.pipeline(ds0, 'cwru', extractor, \n",
    "                                  dc_kwargs=dc_kwargs, ft_kwargs=ft_kwargs, \n",
    "                                  splits=None, sp_mode='category')\n",
    "\n",
    "dw.save(str(outdir/'partial_domain'/str(splits)/'test'))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8cee3c78-b18a-4a9a-b5d0-1576b35b5e1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train 2336\n",
      "val 584\n",
      "test 960\n"
     ]
    }
   ],
   "source": [
    "dw_split = {}\n",
    "\n",
    "for k in ['train', 'val', 'test']:\n",
    "    v = tf.data.Dataset.load(str(outdir/'partial_domain'/\"{'train': 0.8, 'val': 0.2}\"/k))        \n",
    "    dw_split[k] = v    \n",
    "    # ds_split[k] = v.map(lambda X:(tf.transpose(X['feature'], [1,2,0]), X['label']))\n",
    "\n",
    "    # Loading from files makes the size information available \n",
    "    print(k, utils.get_dataset_size(v))    \n",
    "\n",
    "# n_channels, n_bands, n_frames = tuple(dw_split['train'].element_spec['feature'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4bd6ad55-2bf1-4173-901a-e6fb08be5310",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe08c551-6066-4832-a65c-2a6f75c9655e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1b696fbb-714a-4cce-b87b-6a2d5c4fa9db",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dt = ds_split['train']\n",
    "# de = ds_split['test']\n",
    "# dv = ds_split['val']\n",
    "\n",
    "# c = 23\n",
    "# nt = utils.get_dataset_size(dt.filter(lambda x,y:y==c))\n",
    "\n",
    "# ne = utils.get_dataset_size(de.filter(lambda x,y:y==c))\n",
    "\n",
    "# nv = utils.get_dataset_size(dv.filter(lambda x,y:y==c))\n",
    "\n",
    "# nt/(nt+ne+nv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0b42344-d9ef-48f7-a380-c1325247ea4b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c800b4ae-1233-4acb-9b45-6a2fb7c68979",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dc006f41-3f56-4746-8d67-0a94b3772810",
   "metadata": {},
   "outputs": [],
   "source": [
    "# takesample(ds_split['train'])[1]\n",
    "\n",
    "rr=set([(ss[1].numpy(),ww['label'].numpy().decode()) for ss, ww in zip(ds_split['val'], dw_split['val'])])\n",
    "    \n",
    "\n",
    "# len([b[0] for b in rr])\n",
    "\n",
    "# utils.get_dataset_size(dw_split['train'])\n",
    "\n",
    "# ds_split['train'].element_spec\n",
    "\n",
    "# takesample(dw_split['train'])['feature']-tf.transpose(takesample(ds_split['train'])[0], [2,0,1])\n",
    "\n",
    "# ds_train.element_spec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a2381f03-d2e8-420e-80e1-0b08e5bfe647",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{(0, '19b7c8c9fce8e40a7221ddf4f84640b4'),\n",
       " (1, '758085eb101c295ef02a13c183f790c9'),\n",
       " (2, '4b9452e74d31f6871c4c6f0432da3cf7'),\n",
       " (3, 'f15c0cd7bb0d2e2a384027aecfbbde9c'),\n",
       " (4, 'faff6146cb9d081a2def0e82365aa6f5'),\n",
       " (5, '04941fdafbda3fa5ad70767533d38dea'),\n",
       " (6, '9b317898b4deeede89881a2d0918675b'),\n",
       " (7, 'ecb9fb8914e2ee54ced2e35b853a1be4'),\n",
       " (8, 'd39d89316ed238037e7a5c5dc087dd9e'),\n",
       " (9, '894b6e49c21fd1195d42263030a82edf'),\n",
       " (10, 'aa676c6c35719402705d330358031eb8'),\n",
       " (11, '6607c34e4480ce5df6afa2aa943bf26b'),\n",
       " (12, '7b612e85b5b49616590fee9758170c94'),\n",
       " (13, '921c54c70985c1fe783d04a4ecbceaa9'),\n",
       " (14, 'a126b311fbbf434ba935092728125ae6'),\n",
       " (15, 'ada901bdb3d7092c229e47ff7ecb1728'),\n",
       " (16, '7e297d6fada7128dffd8021c1d372379'),\n",
       " (17, '10d51e0caf5f4ff67ae428bcf1a0bb02'),\n",
       " (18, '6a669739e6fdfa4401bf3f70c5d9e323'),\n",
       " (19, '445d82dca0a6030521a68a7599293f82'),\n",
       " (20, 'f9b9bb12c159f3d673b064486cb8a842'),\n",
       " (21, 'ca79b89cde83eaa59f650367c712973d'),\n",
       " (22, '42be485ad63a6716ac3f70ba720eb6ed'),\n",
       " (23, '53138cc859e723ee5b8ce50cc3acf7aa'),\n",
       " (24, '2c9f2adcfa88b11f689fabbe90bb8816'),\n",
       " (25, '1f9da2022a7ca270a5edb1338a61dc2c')}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97b04bb8-9a23-4b98-b531-54849d733914",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3e692d2-31c9-4350-9889-3f90a4fdfd34",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "443ba60d-5227-49f4-be3a-817817c6afef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ele = list(ds0.take(1))[0]\n",
    "\n",
    "# x = ele['signal']['DE'].numpy()\n",
    "# sr = ele['metadata']['SamplingRate'].numpy()\n",
    "\n",
    "# plot(x)\n",
    "# Audio(x, rate=sr)\n",
    "\n",
    "# plot(x[:len(x)//10])\n",
    "\n",
    "# ele = list(compactor.dataset.take(1))[0]\n",
    "\n",
    "# x = ele['signal'][0].numpy()\n",
    "# sr = ele['metadata']['SamplingRate'].numpy()\n",
    "\n",
    "# plot(x)\n",
    "# Audio(x, rate=sr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c631d752-708b-402e-93a6-b215173fc5d4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09ab3080-f9db-4680-a8c1-097014e61bdb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "fdf0538b-d380-44cf-8c17-5e3643dcafa4",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Transfer Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a0f077e2-7176-43e2-965b-d7884386cad4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_predefined_task(ds0,\n",
    "                         channels=['DE', 'FE', 'BA'],\n",
    "                         keys=['FaultComponent', 'FaultSize'],\n",
    "                         filters={'LoadForce': [0,1,2,3]},\n",
    "                         feature_extractor = lambda x, sr: melspectrogram(x, sr, time_window=0.025, hop_step=0.0125, n_mels=64),\n",
    "                         window_shape=64, downsample=64\n",
    "                        ):\n",
    "\n",
    "    transformer = cwru.DatasetPreprocessing(ds0, feature_extractor, \n",
    "                                        filters=filters, \n",
    "                                        keys=keys, channels=channels, \n",
    "                                            **kwargs\n",
    "                                        )\n",
    "    ds = transformer.dataset_windows.map(lambda label, info, x: (tf.transpose(x, [1,2,0]), label))\n",
    "    ds_split = split_dataset_random(ds, split={'train':0.25, 'val':0.75}, reshuffle_each_iteration=False)\n",
    "\n",
    "\n",
    "from dpmhm.datasets.preprocessing import split_dataset_random\n",
    "\n",
    "batch_size = 16\n",
    "\n",
    "ds_split = split_dataset_random(ds, split={'train':0.25, 'val':0.75}, reshuffle_each_iteration=False)\n",
    "ds_train = ds_split['train'].cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "ds_val = ds_split['val'].batch(batch_size).prefetch(tf.data.AUTOTUNE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2b95217-e1b5-43ce-93f3-393d4fd469da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c9eb32f-c685-4928-8dee-0c223cb4c1b3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4403d2aa-6280-4062-8f94-f3e571b7bd09",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ad6d5f29-2750-4d05-9388-300c7dd08fce",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300\n"
     ]
    }
   ],
   "source": [
    "fp = tempfile.TemporaryDirectory()\n",
    "\n",
    "transformer.dataset_windows.map(lambda label, info, x: (tf.transpose(x, [1,2,0]), label)).save(fp.name)\n",
    "ds = tf.data.Dataset.load(fp.name)    \n",
    "\n",
    "# fp.cleanup()\n",
    "\n",
    "# with tempfile.TemporaryDirectory() as fp:\n",
    "#     print(fp)\n",
    "#     transformer.dataset_windows.map(lambda label, info, x: (tf.transpose(x, [1,2,0]), label)).save(fp)\n",
    "#     ds = tf.data.Dataset.load(fp)    \n",
    "#     list(ds.take(10))\n",
    "    \n",
    "# list(ds.take(10))    \n",
    "\n",
    "print(len(ds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fdb7ab75-fbdd-416f-8325-98c2a90d7911",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dpmhm.datasets.preprocessing import split_dataset_random\n",
    "\n",
    "batch_size = 16\n",
    "\n",
    "ds_split = split_dataset_random(ds, split={'train':0.25, 'val':0.75}, reshuffle_each_iteration=False)\n",
    "ds_train = ds_split['train'].cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "ds_val = ds_split['val'].batch(batch_size).prefetch(tf.data.AUTOTUNE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "008e2bd9-287b-41ef-8794-66eea4cdb074",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75\n"
     ]
    }
   ],
   "source": [
    "print(len(ds_split['train']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "83a8473b-a247-46f9-9a4b-b2d53b49e09e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25 (64, 64, 3)\n"
     ]
    }
   ],
   "source": [
    "ele = list(ds.take(1))[0]\n",
    "\n",
    "n_bands, n_frames, n_channels = ele[0].shape\n",
    "n_classes = len({x[1].numpy() for x in ds})\n",
    "input_shape=(n_bands,n_frames,n_channels)\n",
    "\n",
    "print(n_classes, input_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ea7f3fe-159e-4344-8281-4c70dac2bfe9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03ca4cf5-ec8f-4ffb-a939-9986191c1703",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a4b680df-3ae4-405a-bd40-2291fe3054b3",
   "metadata": {},
   "source": [
    "## Few-Shot Transfer learning + Domain adaptation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2c46f306-186c-44ea-ab48-89f119a87338",
   "metadata": {},
   "outputs": [],
   "source": [
    "channels = ['DE', 'FE', 'BA']  # will rule out the normal data\n",
    "# channels = ['DE']  # will rule out the normal data\n",
    "\n",
    "keys = ['FaultComponent', 'FaultSize']\n",
    "\n",
    "# feature_extractor = lambda x, sr: spectrogram(x, sr, time_window=0.025, hop_step=0.0125, to_db=True)\n",
    "feature_extractor = lambda x, sr: melspectrogram(x, sr, time_window=0.025, hop_step=0.0125, n_mels=64)\n",
    "\n",
    "transformer_source = cwru.DatasetPreprocessing(ds0, feature_extractor, \n",
    "                                       filters={'LoadForce': [0,1,2]}, keys=keys, channels=channels, \n",
    "                                       window_shape=64, downsample=64)\n",
    "\n",
    "transformer_target = cwru.DatasetPreprocessing(ds0, feature_extractor, \n",
    "                                       filters={'LoadForce':[3]}, keys=keys, channels=channels, \n",
    "                                       window_shape=64, downsample=64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "11297bf6-b52c-4800-afb7-c0e4a45b3e36",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "876 288\n"
     ]
    }
   ],
   "source": [
    "fp = tempfile.TemporaryDirectory()\n",
    "transformer_source.dataset_windows.map(lambda label, info, x: (tf.transpose(x, [1,2,0]), label)).save(fp.name)\n",
    "dss = tf.data.Dataset.load(fp.name)    \n",
    "\n",
    "fq = tempfile.TemporaryDirectory()\n",
    "transformer_target.dataset_windows.map(lambda label, info, x: (tf.transpose(x, [1,2,0]), label)).save(fq.name)\n",
    "dst = tf.data.Dataset.load(fq.name)    \n",
    "\n",
    "print(len(dss), len(dst))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e63b8aa9-6eb2-4bff-b919-5a363234b6ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dpmhm.datasets.preprocessing import split_dataset_random\n",
    "\n",
    "batch_size = 16\n",
    "\n",
    "dss_split = split_dataset_random(dss, split={'train':0.8, 'val':0.2}, reshuffle_each_iteration=False)\n",
    "dss_train = dss_split['train'].cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "dss_val = dss_split['val'].batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "dst_split = split_dataset_random(dst, split={'train':0.2, 'val':0.8}, reshuffle_each_iteration=False)\n",
    "dst_train = dst_split['train'].cache().batch(batch_size).prefetch(tf.data.AUTOTUNE)\n",
    "dst_val = dst_split['val'].batch(batch_size).prefetch(tf.data.AUTOTUNE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b46eb3fc-762a-4112-b92c-f118d2c0ce57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26 (64, 64, 3)\n"
     ]
    }
   ],
   "source": [
    "ele = list(dss.take(1))[0]\n",
    "\n",
    "n_bands, n_frames, n_channels = ele[0].shape\n",
    "n_classes = len({x[1].numpy() for x in dss})\n",
    "input_shape=(n_bands,n_frames,n_channels)\n",
    "\n",
    "print(n_classes, input_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "67da47f6-ca1a-4a2f-8f1c-7b64d6970c5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "288\n",
      "57\n",
      "[2 4 2 4 3 3 2 2 1 1 2 2 1 3 1 3 3 2 0 3 3 3 2 5 0 0]\n"
     ]
    }
   ],
   "source": [
    "print(len(dst))\n",
    "\n",
    "print(len(dst_split['train']))\n",
    "\n",
    "ds = dst_split['train']\n",
    "counter = np.zeros(n_classes, dtype=int)\n",
    "for ele in ds:\n",
    "    counter[ele[1].numpy()] += 1\n",
    "\n",
    "print(counter)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bf1048b-a6d3-439e-b265-bfcd94f6108e",
   "metadata": {},
   "source": [
    "### Transfer learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "02dce8e4-878c-4f14-bd3f-71e3582833f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "base_model = VGG19(include_top=False, weights='imagenet', input_shape=input_shape, classes=n_classes)\n",
    "\n",
    "inputs = base_model.layers[0].input\n",
    "# layer = keras.layers.BatchNormalization()\n",
    "# layer.build((None, 4))  # Create the weights\n",
    "\n",
    "x = base_model(inputs, training=False)\n",
    "x = keras.layers.Flatten(name=\"flatten\")(x)\n",
    "x = keras.layers.Dense(4096, activation=\"relu\", name=\"fc1\")(x)\n",
    "x = keras.layers.Dense(4096, activation=\"relu\", name=\"fc2\")(x)\n",
    "outputs = keras.layers.Dense(n_classes, activation=None, name=\"predictions\")(x)\n",
    "\n",
    "model = keras.Model(inputs, outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "c672d795-df61-4369-bf7c-90d09e2e47be",
   "metadata": {},
   "outputs": [],
   "source": [
    "base_model.trainable = False\n",
    "\n",
    "from_logits = 'softmax' not in str(model.get_layer('predictions').activation)\n",
    "\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.Adam(),\n",
    "    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=from_logits),\n",
    "    metrics=['accuracy'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2808a93a-4192-4cef-8bba-4eb135f44373",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "44/44 [==============================] - 2s 42ms/step - loss: 0.2205 - accuracy: 0.9471 - val_loss: 0.0821 - val_accuracy: 0.9773\n",
      "Epoch 2/30\n",
      "44/44 [==============================] - 2s 39ms/step - loss: 0.0121 - accuracy: 0.9971 - val_loss: 0.1900 - val_accuracy: 0.9602\n",
      "Epoch 3/30\n",
      "44/44 [==============================] - 2s 39ms/step - loss: 0.0166 - accuracy: 0.9957 - val_loss: 0.0255 - val_accuracy: 0.9886\n",
      "Epoch 4/30\n",
      "44/44 [==============================] - 2s 38ms/step - loss: 0.0033 - accuracy: 0.9986 - val_loss: 0.0529 - val_accuracy: 0.9830\n",
      "Epoch 5/30\n",
      "44/44 [==============================] - 2s 38ms/step - loss: 0.0036 - accuracy: 0.9986 - val_loss: 0.0403 - val_accuracy: 0.9830\n",
      "Epoch 5: early stopping\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    dss_train,\n",
    "    validation_data=dss_val,\n",
    "    epochs=30,\n",
    "    callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=2),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3ae5f03-266e-42de-a5dd-5d3008a8d56d",
   "metadata": {},
   "source": [
    "#### Fine tuning: Catastrophic forgetting!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "aede72bb-98b6-4d22-b273-1076ef98c2a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11/11 [==============================] - 0s 26ms/step - loss: 1.6488 - accuracy: 0.5682\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.6488178968429565, 0.5681818127632141]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(dss_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "6b12581b-7e0b-4b04-a7bb-1c9b3c6d935a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15/15 [==============================] - 0s 24ms/step - loss: 10.3689 - accuracy: 0.1169\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[10.368870735168457, 0.11688311398029327]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(dst_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3be335ce-9bf1-4d80-80fc-d3ce7a44ab8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Unfreeze the base model\n",
    "base_model.trainable = True\n",
    "\n",
    "# It's important to recompile your model after you make any changes\n",
    "# to the `trainable` attribute of any inner layer, so that your changes\n",
    "# are take into account\n",
    "model.compile(\n",
    "    optimizer=keras.optimizers.Adam(1e-5),  # Very low learning rate\n",
    "    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=from_logits),\n",
    "    metrics=['accuracy'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "c8741977-2e0e-4349-a1e5-78ed08a192eb",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-04 00:01:12.231444: W tensorflow/core/common_runtime/bfc_allocator.cc:479] Allocator (GPU_0_bfc) ran out of memory trying to allocate 8B (rounded to 256)requested by op Equal\n",
      "If the cause is memory fragmentation maybe the environment variable 'TF_GPU_ALLOCATOR=cuda_malloc_async' will improve the situation. \n",
      "Current allocation summary follows.\n",
      "Current allocation summary follows.\n",
      "2022-10-04 00:01:12.231472: I tensorflow/core/common_runtime/bfc_allocator.cc:1033] BFCAllocator dump for GPU_0_bfc\n",
      "2022-10-04 00:01:12.231483: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (256): \tTotal Chunks: 206, Chunks in use: 206. 51.5KiB allocated for chunks. 51.5KiB in use in bin. 8.2KiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231488: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (512): \tTotal Chunks: 22, Chunks in use: 22. 11.2KiB allocated for chunks. 11.2KiB in use in bin. 11.0KiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231493: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (1024): \tTotal Chunks: 45, Chunks in use: 45. 46.5KiB allocated for chunks. 46.5KiB in use in bin. 45.0KiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231498: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (2048): \tTotal Chunks: 87, Chunks in use: 87. 176.5KiB allocated for chunks. 176.5KiB in use in bin. 174.0KiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231503: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (4096): \tTotal Chunks: 11, Chunks in use: 11. 74.2KiB allocated for chunks. 74.2KiB in use in bin. 74.2KiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231507: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (8192): \tTotal Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231512: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (16384): \tTotal Chunks: 36, Chunks in use: 36. 591.8KiB allocated for chunks. 591.8KiB in use in bin. 576.0KiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231516: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (32768): \tTotal Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231520: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (65536): \tTotal Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231524: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (131072): \tTotal Chunks: 11, Chunks in use: 11. 1.55MiB allocated for chunks. 1.55MiB in use in bin. 1.55MiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231528: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (262144): \tTotal Chunks: 27, Chunks in use: 27. 9.59MiB allocated for chunks. 9.59MiB in use in bin. 9.59MiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231532: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (524288): \tTotal Chunks: 11, Chunks in use: 11. 6.57MiB allocated for chunks. 6.57MiB in use in bin. 5.88MiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231537: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (1048576): \tTotal Chunks: 13, Chunks in use: 13. 14.56MiB allocated for chunks. 14.56MiB in use in bin. 13.50MiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231544: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (2097152): \tTotal Chunks: 32, Chunks in use: 32. 73.49MiB allocated for chunks. 73.49MiB in use in bin. 72.00MiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231552: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (4194304): \tTotal Chunks: 12, Chunks in use: 12. 53.62MiB allocated for chunks. 53.62MiB in use in bin. 51.75MiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231557: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (8388608): \tTotal Chunks: 77, Chunks in use: 77. 710.34MiB allocated for chunks. 710.34MiB in use in bin. 693.00MiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231561: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (16777216): \tTotal Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231566: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (33554432): \tTotal Chunks: 18, Chunks in use: 18. 607.59MiB allocated for chunks. 607.59MiB in use in bin. 576.00MiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231577: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (67108864): \tTotal Chunks: 18, Chunks in use: 18. 1.12GiB allocated for chunks. 1.12GiB in use in bin. 1.12GiB client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231581: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (134217728): \tTotal Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231584: I tensorflow/core/common_runtime/bfc_allocator.cc:1040] Bin (268435456): \tTotal Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.\n",
      "2022-10-04 00:01:12.231588: I tensorflow/core/common_runtime/bfc_allocator.cc:1056] Bin for 256B was 256B, Chunk State: \n",
      "2022-10-04 00:01:12.231591: I tensorflow/core/common_runtime/bfc_allocator.cc:1069] Next region of size 2758017024\n",
      "2022-10-04 00:01:12.231598: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000000 of size 1280 next 1\n",
      "2022-10-04 00:01:12.231603: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000500 of size 256 next 2\n",
      "2022-10-04 00:01:12.231606: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000600 of size 256 next 3\n",
      "2022-10-04 00:01:12.231608: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000700 of size 256 next 4\n",
      "2022-10-04 00:01:12.231611: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000800 of size 256 next 5\n",
      "2022-10-04 00:01:12.231614: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000900 of size 256 next 6\n",
      "2022-10-04 00:01:12.231617: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000a00 of size 256 next 7\n",
      "2022-10-04 00:01:12.231619: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000b00 of size 256 next 8\n",
      "2022-10-04 00:01:12.231622: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000c00 of size 256 next 9\n",
      "2022-10-04 00:01:12.231625: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000d00 of size 256 next 24\n",
      "2022-10-04 00:01:12.231628: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000e00 of size 256 next 25\n",
      "2022-10-04 00:01:12.231630: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12000f00 of size 256 next 26\n",
      "2022-10-04 00:01:12.231633: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001000 of size 256 next 27\n",
      "2022-10-04 00:01:12.231636: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001100 of size 256 next 28\n",
      "2022-10-04 00:01:12.231639: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001200 of size 256 next 30\n",
      "2022-10-04 00:01:12.231641: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001300 of size 256 next 31\n",
      "2022-10-04 00:01:12.231644: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001400 of size 256 next 32\n",
      "2022-10-04 00:01:12.231647: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001500 of size 256 next 33\n",
      "2022-10-04 00:01:12.231649: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001600 of size 256 next 34\n",
      "2022-10-04 00:01:12.231652: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001700 of size 256 next 35\n",
      "2022-10-04 00:01:12.231655: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001800 of size 256 next 37\n",
      "2022-10-04 00:01:12.231658: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001900 of size 256 next 29\n",
      "2022-10-04 00:01:12.231660: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001a00 of size 256 next 36\n",
      "2022-10-04 00:01:12.231663: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001b00 of size 256 next 23\n",
      "2022-10-04 00:01:12.231666: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001c00 of size 256 next 38\n",
      "2022-10-04 00:01:12.231669: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001d00 of size 256 next 39\n",
      "2022-10-04 00:01:12.231672: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001e00 of size 256 next 40\n",
      "2022-10-04 00:01:12.231675: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12001f00 of size 256 next 41\n",
      "2022-10-04 00:01:12.231678: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002000 of size 256 next 42\n",
      "2022-10-04 00:01:12.231680: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002100 of size 256 next 43\n",
      "2022-10-04 00:01:12.231683: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002200 of size 256 next 44\n",
      "2022-10-04 00:01:12.231686: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002300 of size 256 next 45\n",
      "2022-10-04 00:01:12.231689: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002400 of size 256 next 46\n",
      "2022-10-04 00:01:12.231691: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002500 of size 256 next 47\n",
      "2022-10-04 00:01:12.231694: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002600 of size 256 next 48\n",
      "2022-10-04 00:01:12.231697: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002700 of size 256 next 49\n",
      "2022-10-04 00:01:12.231700: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002800 of size 256 next 51\n",
      "2022-10-04 00:01:12.231702: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002900 of size 256 next 52\n",
      "2022-10-04 00:01:12.231705: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002a00 of size 256 next 50\n",
      "2022-10-04 00:01:12.231708: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002b00 of size 256 next 53\n",
      "2022-10-04 00:01:12.231711: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002c00 of size 256 next 58\n",
      "2022-10-04 00:01:12.231713: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002d00 of size 256 next 56\n",
      "2022-10-04 00:01:12.231716: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002e00 of size 256 next 57\n",
      "2022-10-04 00:01:12.231719: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12002f00 of size 256 next 199\n",
      "2022-10-04 00:01:12.231722: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003000 of size 256 next 61\n",
      "2022-10-04 00:01:12.231727: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003100 of size 256 next 62\n",
      "2022-10-04 00:01:12.231732: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003200 of size 256 next 63\n",
      "2022-10-04 00:01:12.231735: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003300 of size 256 next 101\n",
      "2022-10-04 00:01:12.231738: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003400 of size 256 next 67\n",
      "2022-10-04 00:01:12.231741: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003500 of size 256 next 65\n",
      "2022-10-04 00:01:12.231744: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003600 of size 256 next 66\n",
      "2022-10-04 00:01:12.231746: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003700 of size 256 next 206\n",
      "2022-10-04 00:01:12.231749: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003800 of size 256 next 102\n",
      "2022-10-04 00:01:12.231752: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003900 of size 256 next 64\n",
      "2022-10-04 00:01:12.231755: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003a00 of size 256 next 70\n",
      "2022-10-04 00:01:12.231757: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003b00 of size 256 next 71\n",
      "2022-10-04 00:01:12.231761: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003c00 of size 256 next 74\n",
      "2022-10-04 00:01:12.231764: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003d00 of size 256 next 92\n",
      "2022-10-04 00:01:12.231767: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003e00 of size 256 next 106\n",
      "2022-10-04 00:01:12.231769: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12003f00 of size 256 next 68\n",
      "2022-10-04 00:01:12.231772: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004000 of size 256 next 87\n",
      "2022-10-04 00:01:12.231775: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004100 of size 256 next 79\n",
      "2022-10-04 00:01:12.231778: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004200 of size 256 next 271\n",
      "2022-10-04 00:01:12.231782: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004300 of size 256 next 261\n",
      "2022-10-04 00:01:12.231786: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004400 of size 256 next 80\n",
      "2022-10-04 00:01:12.231789: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004500 of size 256 next 104\n",
      "2022-10-04 00:01:12.231792: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004600 of size 256 next 108\n",
      "2022-10-04 00:01:12.231795: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004700 of size 256 next 111\n",
      "2022-10-04 00:01:12.231797: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004800 of size 256 next 82\n",
      "2022-10-04 00:01:12.231800: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004900 of size 256 next 75\n",
      "2022-10-04 00:01:12.231803: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004a00 of size 256 next 76\n",
      "2022-10-04 00:01:12.231806: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004b00 of size 256 next 98\n",
      "2022-10-04 00:01:12.231808: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004c00 of size 256 next 95\n",
      "2022-10-04 00:01:12.231811: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004d00 of size 256 next 97\n",
      "2022-10-04 00:01:12.231815: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12004e00 of size 512 next 81\n",
      "2022-10-04 00:01:12.231818: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12005000 of size 768 next 84\n",
      "2022-10-04 00:01:12.231821: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12005300 of size 256 next 85\n",
      "2022-10-04 00:01:12.231823: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12005400 of size 256 next 88\n",
      "2022-10-04 00:01:12.231827: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12005500 of size 17408 next 140\n",
      "2022-10-04 00:01:12.231833: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12009900 of size 256 next 112\n",
      "2022-10-04 00:01:12.231836: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12009a00 of size 256 next 116\n",
      "2022-10-04 00:01:12.231839: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12009b00 of size 256 next 117\n",
      "2022-10-04 00:01:12.231842: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12009c00 of size 256 next 118\n",
      "2022-10-04 00:01:12.231845: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12009d00 of size 256 next 119\n",
      "2022-10-04 00:01:12.231847: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12009e00 of size 256 next 120\n",
      "2022-10-04 00:01:12.231850: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12009f00 of size 256 next 121\n",
      "2022-10-04 00:01:12.231853: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1200a000 of size 1024 next 86\n",
      "2022-10-04 00:01:12.231856: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1200a400 of size 1792 next 138\n",
      "2022-10-04 00:01:12.231860: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1200ab00 of size 256 next 103\n",
      "2022-10-04 00:01:12.231863: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1200ac00 of size 823552 next 153\n",
      "2022-10-04 00:01:12.231866: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d3d00 of size 512 next 149\n",
      "2022-10-04 00:01:12.231869: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d3f00 of size 1536 next 152\n",
      "2022-10-04 00:01:12.231873: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d4500 of size 1024 next 141\n",
      "2022-10-04 00:01:12.231879: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d4900 of size 256 next 145\n",
      "2022-10-04 00:01:12.231882: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d4a00 of size 1024 next 154\n",
      "2022-10-04 00:01:12.231885: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d4e00 of size 3072 next 163\n",
      "2022-10-04 00:01:12.231888: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d5a00 of size 2048 next 160\n",
      "2022-10-04 00:01:12.231891: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d6200 of size 2048 next 162\n",
      "2022-10-04 00:01:12.231894: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d6a00 of size 2048 next 168\n",
      "2022-10-04 00:01:12.231897: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d7200 of size 3584 next 148\n",
      "2022-10-04 00:01:12.231899: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120d8000 of size 147456 next 179\n",
      "2022-10-04 00:01:12.231903: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120fc000 of size 512 next 146\n",
      "2022-10-04 00:01:12.231906: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120fc200 of size 1024 next 151\n",
      "2022-10-04 00:01:12.231908: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120fc600 of size 2048 next 165\n",
      "2022-10-04 00:01:12.231912: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc120fce00 of size 16384 next 167\n",
      "2022-10-04 00:01:12.231915: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12100e00 of size 16384 next 178\n",
      "2022-10-04 00:01:12.231919: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12104e00 of size 16384 next 184\n",
      "2022-10-04 00:01:12.231931: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12108e00 of size 16384 next 185\n",
      "2022-10-04 00:01:12.231937: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1210ce00 of size 16384 next 189\n",
      "2022-10-04 00:01:12.231940: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12110e00 of size 16384 next 191\n",
      "2022-10-04 00:01:12.231943: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12114e00 of size 256 next 195\n",
      "2022-10-04 00:01:12.231946: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12114f00 of size 256 next 196\n",
      "2022-10-04 00:01:12.231949: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12115000 of size 256 next 197\n",
      "2022-10-04 00:01:12.231951: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12115100 of size 256 next 198\n",
      "2022-10-04 00:01:12.231954: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12115200 of size 16384 next 130\n",
      "2022-10-04 00:01:12.231957: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12119200 of size 31488 next 10\n",
      "2022-10-04 00:01:12.231961: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12120d00 of size 256 next 11\n",
      "2022-10-04 00:01:12.231964: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12120e00 of size 256 next 12\n",
      "2022-10-04 00:01:12.231967: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12120f00 of size 256 next 13\n",
      "2022-10-04 00:01:12.231970: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121000 of size 256 next 14\n",
      "2022-10-04 00:01:12.231973: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121100 of size 256 next 15\n",
      "2022-10-04 00:01:12.231976: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121200 of size 256 next 16\n",
      "2022-10-04 00:01:12.231979: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121300 of size 256 next 17\n",
      "2022-10-04 00:01:12.231984: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121400 of size 256 next 18\n",
      "2022-10-04 00:01:12.231989: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121500 of size 256 next 19\n",
      "2022-10-04 00:01:12.231992: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121600 of size 256 next 20\n",
      "2022-10-04 00:01:12.231994: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121700 of size 256 next 21\n",
      "2022-10-04 00:01:12.231997: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121800 of size 256 next 22\n",
      "2022-10-04 00:01:12.232000: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12121900 of size 16384 next 215\n",
      "2022-10-04 00:01:12.232003: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12125900 of size 425984 next 131\n",
      "2022-10-04 00:01:12.232006: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1218d900 of size 6912 next 73\n",
      "2022-10-04 00:01:12.232009: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1218f400 of size 147456 next 90\n",
      "2022-10-04 00:01:12.232012: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc121b3400 of size 294912 next 99\n",
      "2022-10-04 00:01:12.232015: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc121fb400 of size 589824 next 96\n",
      "2022-10-04 00:01:12.232019: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1228b400 of size 1179648 next 55\n",
      "2022-10-04 00:01:12.232022: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc123ab400 of size 2359296 next 54\n",
      "2022-10-04 00:01:12.232025: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc125eb400 of size 2359296 next 93\n",
      "2022-10-04 00:01:12.232030: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1282b400 of size 1024 next 78\n",
      "2022-10-04 00:01:12.232035: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1282b800 of size 2744576 next 114\n",
      "2022-10-04 00:01:12.232038: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12ac9900 of size 2048 next 170\n",
      "2022-10-04 00:01:12.232041: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12aca100 of size 2048 next 172\n",
      "2022-10-04 00:01:12.232044: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12aca900 of size 256 next 210\n",
      "2022-10-04 00:01:12.232047: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12acaa00 of size 256 next 180\n",
      "2022-10-04 00:01:12.232049: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12acab00 of size 256 next 183\n",
      "2022-10-04 00:01:12.232052: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12acac00 of size 256 next 187\n",
      "2022-10-04 00:01:12.232055: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12acad00 of size 256 next 192\n",
      "2022-10-04 00:01:12.232058: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12acae00 of size 256 next 193\n",
      "2022-10-04 00:01:12.232061: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12acaf00 of size 256 next 194\n",
      "2022-10-04 00:01:12.232063: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12acb000 of size 256 next 175\n",
      "2022-10-04 00:01:12.232066: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12acb100 of size 6912 next 177\n",
      "2022-10-04 00:01:12.232069: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12accc00 of size 256 next 150\n",
      "2022-10-04 00:01:12.232073: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12accd00 of size 1166336 next 113\n",
      "2022-10-04 00:01:12.232078: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12be9900 of size 294912 next 155\n",
      "2022-10-04 00:01:12.232082: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc12c31900 of size 4325376 next 83\n",
      "2022-10-04 00:01:12.232085: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc13051900 of size 33554432 next 211\n",
      "2022-10-04 00:01:12.232088: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc15051900 of size 67108864 next 213\n",
      "2022-10-04 00:01:12.232091: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc19051900 of size 33554432 next 203\n",
      "2022-10-04 00:01:12.232094: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1b051900 of size 67108864 next 205\n",
      "2022-10-04 00:01:12.232097: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1f051900 of size 1024 next 144\n",
      "2022-10-04 00:01:12.232100: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1f051d00 of size 4718592 next 137\n",
      "2022-10-04 00:01:12.232103: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1f4d1d00 of size 2048 next 91\n",
      "2022-10-04 00:01:12.232106: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1f4d2500 of size 9437184 next 89\n",
      "2022-10-04 00:01:12.232109: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1fdd2500 of size 2048 next 60\n",
      "2022-10-04 00:01:12.232112: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc1fdd2d00 of size 9437184 next 59\n",
      "2022-10-04 00:01:12.232115: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc206d2d00 of size 2048 next 105\n",
      "2022-10-04 00:01:12.232120: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc206d3500 of size 9437184 next 69\n",
      "2022-10-04 00:01:12.232124: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc20fd3500 of size 2048 next 72\n",
      "2022-10-04 00:01:12.232127: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc20fd3d00 of size 9437184 next 77\n",
      "2022-10-04 00:01:12.232130: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc218d3d00 of size 2048 next 109\n",
      "2022-10-04 00:01:12.232132: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc218d4500 of size 9437184 next 110\n",
      "2022-10-04 00:01:12.232135: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc221d4500 of size 2048 next 107\n",
      "2022-10-04 00:01:12.232138: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc221d4d00 of size 9437184 next 115\n",
      "2022-10-04 00:01:12.232141: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc22ad4d00 of size 2048 next 129\n",
      "2022-10-04 00:01:12.232144: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc22ad5500 of size 9437184 next 122\n",
      "2022-10-04 00:01:12.232147: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc233d5500 of size 2048 next 123\n",
      "2022-10-04 00:01:12.232149: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc233d5d00 of size 33554432 next 124\n",
      "2022-10-04 00:01:12.232152: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc253d5d00 of size 16384 next 127\n",
      "2022-10-04 00:01:12.232155: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc253d9d00 of size 16384 next 126\n",
      "2022-10-04 00:01:12.232159: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc253ddd00 of size 425984 next 132\n",
      "2022-10-04 00:01:12.232164: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25445d00 of size 256 next 136\n",
      "2022-10-04 00:01:12.232168: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25445e00 of size 6912 next 135\n",
      "2022-10-04 00:01:12.232171: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25447900 of size 256 next 134\n",
      "2022-10-04 00:01:12.232174: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25447a00 of size 147456 next 133\n",
      "2022-10-04 00:01:12.232177: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2546ba00 of size 256 next 200\n",
      "2022-10-04 00:01:12.232180: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2546bb00 of size 294912 next 214\n",
      "2022-10-04 00:01:12.232183: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc254b3b00 of size 512 next 204\n",
      "2022-10-04 00:01:12.232186: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc254b3d00 of size 589824 next 202\n",
      "2022-10-04 00:01:12.232189: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25543d00 of size 512 next 207\n",
      "2022-10-04 00:01:12.232192: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25543f00 of size 1179648 next 212\n",
      "2022-10-04 00:01:12.232195: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25663f00 of size 1024 next 201\n",
      "2022-10-04 00:01:12.232198: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25664300 of size 2359296 next 209\n",
      "2022-10-04 00:01:12.232200: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc258a4300 of size 1024 next 181\n",
      "2022-10-04 00:01:12.232203: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc258a4700 of size 2359296 next 208\n",
      "2022-10-04 00:01:12.232206: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25ae4700 of size 1024 next 216\n",
      "2022-10-04 00:01:12.232209: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25ae4b00 of size 2359296 next 217\n",
      "2022-10-04 00:01:12.232212: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25d24b00 of size 1024 next 218\n",
      "2022-10-04 00:01:12.232215: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc25d24f00 of size 4718592 next 219\n",
      "2022-10-04 00:01:12.232217: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc261a4f00 of size 2048 next 220\n",
      "2022-10-04 00:01:12.232220: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc261a5700 of size 9437184 next 221\n",
      "2022-10-04 00:01:12.232223: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc26aa5700 of size 2048 next 222\n",
      "2022-10-04 00:01:12.232226: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc26aa5f00 of size 9437184 next 223\n",
      "2022-10-04 00:01:12.232229: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc273a5f00 of size 2048 next 224\n",
      "2022-10-04 00:01:12.232232: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc273a6700 of size 9437184 next 225\n",
      "2022-10-04 00:01:12.232234: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc27ca6700 of size 2048 next 226\n",
      "2022-10-04 00:01:12.232237: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc27ca6f00 of size 9437184 next 227\n",
      "2022-10-04 00:01:12.232240: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc285a6f00 of size 2048 next 228\n",
      "2022-10-04 00:01:12.232243: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc285a7700 of size 14852608 next 128\n",
      "2022-10-04 00:01:12.232246: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc293d1900 of size 425984 next 186\n",
      "2022-10-04 00:01:12.232249: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc29439900 of size 753664 next 156\n",
      "2022-10-04 00:01:12.232252: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc294f1900 of size 1179648 next 147\n",
      "2022-10-04 00:01:12.232255: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc29611900 of size 3538944 next 157\n",
      "2022-10-04 00:01:12.232258: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc29971900 of size 2359296 next 159\n",
      "2022-10-04 00:01:12.232261: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc29bb1900 of size 16515072 next 164\n",
      "2022-10-04 00:01:12.232264: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2ab71900 of size 4718592 next 161\n",
      "2022-10-04 00:01:12.232267: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2aff1900 of size 14155776 next 166\n",
      "2022-10-04 00:01:12.232270: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2bd71900 of size 9437184 next 169\n",
      "2022-10-04 00:01:12.232273: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2c671900 of size 9437184 next 171\n",
      "2022-10-04 00:01:12.232276: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2cf71900 of size 9437184 next 173\n",
      "2022-10-04 00:01:12.232279: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2d871900 of size 9437184 next 174\n",
      "2022-10-04 00:01:12.232282: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2e171900 of size 9437184 next 176\n",
      "2022-10-04 00:01:12.232285: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2ea71900 of size 425984 next 182\n",
      "2022-10-04 00:01:12.232288: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc2ead9900 of size 66682880 next 158\n",
      "2022-10-04 00:01:12.232291: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc32a71900 of size 33554432 next 139\n",
      "2022-10-04 00:01:12.232293: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc34a71900 of size 67108864 next 142\n",
      "2022-10-04 00:01:12.232296: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc38a71900 of size 67108864 next 143\n",
      "2022-10-04 00:01:12.232299: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc3ca71900 of size 33554432 next 188\n",
      "2022-10-04 00:01:12.232302: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc3ea71900 of size 67108864 next 190\n",
      "2022-10-04 00:01:12.232305: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc42a71900 of size 67108864 next 125\n",
      "2022-10-04 00:01:12.232307: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc46a71900 of size 2048 next 229\n",
      "2022-10-04 00:01:12.232310: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc46a72100 of size 9437184 next 230\n",
      "2022-10-04 00:01:12.232313: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc47372100 of size 2048 next 231\n",
      "2022-10-04 00:01:12.232316: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc47372900 of size 9437184 next 232\n",
      "2022-10-04 00:01:12.232319: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc47c72900 of size 2048 next 233\n",
      "2022-10-04 00:01:12.232322: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc47c73100 of size 33554432 next 234\n",
      "2022-10-04 00:01:12.232324: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc49c73100 of size 16384 next 235\n",
      "2022-10-04 00:01:12.232327: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc49c77100 of size 67108864 next 236\n",
      "2022-10-04 00:01:12.232330: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dc77100 of size 16384 next 237\n",
      "2022-10-04 00:01:12.232333: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dc7b100 of size 425984 next 238\n",
      "2022-10-04 00:01:12.232336: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3100 of size 256 next 239\n",
      "2022-10-04 00:01:12.232338: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3200 of size 256 next 240\n",
      "2022-10-04 00:01:12.232341: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3300 of size 256 next 241\n",
      "2022-10-04 00:01:12.232344: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3400 of size 256 next 242\n",
      "2022-10-04 00:01:12.232347: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3500 of size 256 next 243\n",
      "2022-10-04 00:01:12.232350: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3600 of size 256 next 244\n",
      "2022-10-04 00:01:12.232352: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3700 of size 256 next 245\n",
      "2022-10-04 00:01:12.232355: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3800 of size 256 next 246\n",
      "2022-10-04 00:01:12.232358: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3900 of size 256 next 249\n",
      "2022-10-04 00:01:12.232361: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3a00 of size 256 next 369\n",
      "2022-10-04 00:01:12.232364: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3b00 of size 256 next 269\n",
      "2022-10-04 00:01:12.232367: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce3c00 of size 6912 next 250\n",
      "2022-10-04 00:01:12.232369: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce5700 of size 256 next 258\n",
      "2022-10-04 00:01:12.232372: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dce5800 of size 147456 next 266\n",
      "2022-10-04 00:01:12.232375: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dd09800 of size 256 next 268\n",
      "2022-10-04 00:01:12.232378: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dd09900 of size 294912 next 262\n",
      "2022-10-04 00:01:12.232381: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dd51900 of size 512 next 276\n",
      "2022-10-04 00:01:12.232384: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4dd51b00 of size 1125888 next 285\n",
      "2022-10-04 00:01:12.232387: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4de64900 of size 256 next 273\n",
      "2022-10-04 00:01:12.232390: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4de64a00 of size 512 next 248\n",
      "2022-10-04 00:01:12.232393: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4de64c00 of size 1179648 next 255\n",
      "2022-10-04 00:01:12.232395: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4df84c00 of size 1024 next 100\n",
      "2022-10-04 00:01:12.232398: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4df85000 of size 2359296 next 280\n",
      "2022-10-04 00:01:12.232401: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4e1c5000 of size 1024 next 251\n",
      "2022-10-04 00:01:12.232404: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4e1c5400 of size 2359296 next 284\n",
      "2022-10-04 00:01:12.232407: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4e405400 of size 1024 next 282\n",
      "2022-10-04 00:01:12.232409: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4e405800 of size 2359296 next 253\n",
      "2022-10-04 00:01:12.232412: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4e645800 of size 1024 next 263\n",
      "2022-10-04 00:01:12.232415: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4e645c00 of size 4718592 next 272\n",
      "2022-10-04 00:01:12.232418: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4eac5c00 of size 2048 next 277\n",
      "2022-10-04 00:01:12.232421: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4eac6400 of size 9437184 next 94\n",
      "2022-10-04 00:01:12.232424: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4f3c6400 of size 2048 next 252\n",
      "2022-10-04 00:01:12.232426: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4f3c6c00 of size 9437184 next 275\n",
      "2022-10-04 00:01:12.232429: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4fcc6c00 of size 2048 next 267\n",
      "2022-10-04 00:01:12.232432: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc4fcc7400 of size 9437184 next 270\n",
      "2022-10-04 00:01:12.232435: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc505c7400 of size 2048 next 286\n",
      "2022-10-04 00:01:12.232438: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc505c7c00 of size 9437184 next 283\n",
      "2022-10-04 00:01:12.232440: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc50ec7c00 of size 2048 next 278\n",
      "2022-10-04 00:01:12.232444: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc50ec8400 of size 9437184 next 264\n",
      "2022-10-04 00:01:12.232447: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc517c8400 of size 2048 next 256\n",
      "2022-10-04 00:01:12.232450: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc517c8c00 of size 9437184 next 265\n",
      "2022-10-04 00:01:12.232452: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc520c8c00 of size 2048 next 257\n",
      "2022-10-04 00:01:12.232455: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc520c9400 of size 9437184 next 279\n",
      "2022-10-04 00:01:12.232458: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc529c9400 of size 2048 next 254\n",
      "2022-10-04 00:01:12.232461: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc529c9c00 of size 33554432 next 274\n",
      "2022-10-04 00:01:12.232464: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc549c9c00 of size 16384 next 260\n",
      "2022-10-04 00:01:12.232467: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc549cdc00 of size 67108864 next 247\n",
      "2022-10-04 00:01:12.232470: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc589cdc00 of size 16384 next 288\n",
      "2022-10-04 00:01:12.232472: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc589d1c00 of size 425984 next 281\n",
      "2022-10-04 00:01:12.232475: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58a39c00 of size 256 next 287\n",
      "2022-10-04 00:01:12.232478: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58a39d00 of size 6912 next 289\n",
      "2022-10-04 00:01:12.232481: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58a3b800 of size 256 next 290\n",
      "2022-10-04 00:01:12.232484: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58a3b900 of size 147456 next 291\n",
      "2022-10-04 00:01:12.232486: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58a5f900 of size 256 next 292\n",
      "2022-10-04 00:01:12.232489: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58a5fa00 of size 294912 next 293\n",
      "2022-10-04 00:01:12.232492: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58aa7a00 of size 512 next 294\n",
      "2022-10-04 00:01:12.232495: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58aa7c00 of size 589824 next 295\n",
      "2022-10-04 00:01:12.232498: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58b37c00 of size 512 next 296\n",
      "2022-10-04 00:01:12.232501: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58b37e00 of size 1179648 next 297\n",
      "2022-10-04 00:01:12.232503: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58c57e00 of size 1024 next 298\n",
      "2022-10-04 00:01:12.232506: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58c58200 of size 2359296 next 299\n",
      "2022-10-04 00:01:12.232509: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58e98200 of size 1024 next 300\n",
      "2022-10-04 00:01:12.232512: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc58e98600 of size 2359296 next 301\n",
      "2022-10-04 00:01:12.232515: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc590d8600 of size 1024 next 302\n",
      "2022-10-04 00:01:12.232518: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc590d8a00 of size 2359296 next 303\n",
      "2022-10-04 00:01:12.232520: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc59318a00 of size 1024 next 304\n",
      "2022-10-04 00:01:12.232523: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc59318e00 of size 4718592 next 305\n",
      "2022-10-04 00:01:12.232526: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc59798e00 of size 2048 next 306\n",
      "2022-10-04 00:01:12.232529: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc59799600 of size 9437184 next 307\n",
      "2022-10-04 00:01:12.232532: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5a099600 of size 2048 next 308\n",
      "2022-10-04 00:01:12.232535: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5a099e00 of size 9437184 next 309\n",
      "2022-10-04 00:01:12.232537: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5a999e00 of size 2048 next 310\n",
      "2022-10-04 00:01:12.232540: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5a99a600 of size 9437184 next 311\n",
      "2022-10-04 00:01:12.232543: I tensorflow/core/common_r"
     ]
    },
    {
     "ename": "InternalError",
     "evalue": "Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:GPU:0 in order to run Equal: Dst tensor is not initialized. [Op:Equal]",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInternalError\u001b[0m                             Traceback (most recent call last)",
      "Input \u001b[0;32mIn [63]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m      2\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdst_train\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvalidation_data\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdst_val\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m      5\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mkeras\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcallbacks\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mEarlyStopping\u001b[49m\u001b[43m(\u001b[49m\u001b[43mverbose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpatience\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      6\u001b[0m \u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/keras/utils/traceback_utils.py:70\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m     68\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m     69\u001b[0m     \u001b[38;5;66;03m# `tf.debugging.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m---> 70\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28mNone\u001b[39m\n\u001b[1;32m     71\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     72\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n",
      "File \u001b[0;32m~/.conda/envs/dev38/lib/python3.8/site-packages/tensorflow/python/framework/ops.py:7209\u001b[0m, in \u001b[0;36mraise_from_not_ok_status\u001b[0;34m(e, name)\u001b[0m\n\u001b[1;32m   7207\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mraise_from_not_ok_status\u001b[39m(e, name):\n\u001b[1;32m   7208\u001b[0m   e\u001b[38;5;241m.\u001b[39mmessage \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m name: \u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m+\u001b[39m name \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m-> 7209\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_status_to_exception(e) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28mNone\u001b[39m\n",
      "\u001b[0;31mInternalError\u001b[0m: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:GPU:0 in order to run Equal: Dst tensor is not initialized. [Op:Equal]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "untime/bfc_allocator.cc:1089] InUse at 7fcc5b29a600 of size 2048 next 312\n",
      "2022-10-04 00:01:12.232546: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5b29ae00 of size 9437184 next 313\n",
      "2022-10-04 00:01:12.232548: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5bb9ae00 of size 2048 next 314\n",
      "2022-10-04 00:01:12.232551: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5bb9b600 of size 9437184 next 315\n",
      "2022-10-04 00:01:12.232554: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5c49b600 of size 2048 next 316\n",
      "2022-10-04 00:01:12.232557: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5c49be00 of size 9437184 next 317\n",
      "2022-10-04 00:01:12.232560: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5cd9be00 of size 2048 next 318\n",
      "2022-10-04 00:01:12.232563: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5cd9c600 of size 9437184 next 319\n",
      "2022-10-04 00:01:12.232565: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5d69c600 of size 2048 next 320\n",
      "2022-10-04 00:01:12.232568: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5d69ce00 of size 33554432 next 321\n",
      "2022-10-04 00:01:12.232571: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5f69ce00 of size 16384 next 322\n",
      "2022-10-04 00:01:12.232574: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc5f6a0e00 of size 67108864 next 323\n",
      "2022-10-04 00:01:12.232577: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc636a0e00 of size 16384 next 324\n",
      "2022-10-04 00:01:12.232579: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc636a4e00 of size 425984 next 325\n",
      "2022-10-04 00:01:12.232582: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370ce00 of size 256 next 326\n",
      "2022-10-04 00:01:12.232585: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370cf00 of size 256 next 327\n",
      "2022-10-04 00:01:12.232588: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d000 of size 256 next 328\n",
      "2022-10-04 00:01:12.232590: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d100 of size 256 next 329\n",
      "2022-10-04 00:01:12.232593: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d200 of size 256 next 330\n",
      "2022-10-04 00:01:12.232596: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d300 of size 256 next 331\n",
      "2022-10-04 00:01:12.232599: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d400 of size 256 next 332\n",
      "2022-10-04 00:01:12.232602: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d500 of size 256 next 333\n",
      "2022-10-04 00:01:12.232604: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d600 of size 256 next 353\n",
      "2022-10-04 00:01:12.232607: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d700 of size 256 next 357\n",
      "2022-10-04 00:01:12.232610: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d800 of size 256 next 352\n",
      "2022-10-04 00:01:12.232613: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370d900 of size 256 next 344\n",
      "2022-10-04 00:01:12.232615: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370da00 of size 6912 next 350\n",
      "2022-10-04 00:01:12.232619: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370f500 of size 256 next 354\n",
      "2022-10-04 00:01:12.232622: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6370f600 of size 147456 next 338\n",
      "2022-10-04 00:01:12.232624: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc63733600 of size 256 next 362\n",
      "2022-10-04 00:01:12.232628: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc63733700 of size 294912 next 370\n",
      "2022-10-04 00:01:12.232631: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6377b700 of size 512 next 343\n",
      "2022-10-04 00:01:12.232634: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6377b900 of size 589824 next 345\n",
      "2022-10-04 00:01:12.232636: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6380b900 of size 512 next 351\n",
      "2022-10-04 00:01:12.232639: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6380bb00 of size 1179648 next 346\n",
      "2022-10-04 00:01:12.232642: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6392bb00 of size 1024 next 368\n",
      "2022-10-04 00:01:12.232645: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6392bf00 of size 2359296 next 259\n",
      "2022-10-04 00:01:12.232648: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc63b6bf00 of size 1024 next 374\n",
      "2022-10-04 00:01:12.232650: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc63b6c300 of size 2359296 next 365\n",
      "2022-10-04 00:01:12.232653: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc63dac300 of size 1024 next 373\n",
      "2022-10-04 00:01:12.232656: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc63dac700 of size 2359296 next 339\n",
      "2022-10-04 00:01:12.232659: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc63fec700 of size 1024 next 337\n",
      "2022-10-04 00:01:12.232662: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc63fecb00 of size 4718592 next 336\n",
      "2022-10-04 00:01:12.232664: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6446cb00 of size 2048 next 341\n",
      "2022-10-04 00:01:12.232667: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6446d300 of size 9437184 next 334\n",
      "2022-10-04 00:01:12.232670: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc64d6d300 of size 2048 next 361\n",
      "2022-10-04 00:01:12.232673: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc64d6db00 of size 9437184 next 364\n",
      "2022-10-04 00:01:12.232676: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6566db00 of size 2048 next 356\n",
      "2022-10-04 00:01:12.232679: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6566e300 of size 9437184 next 342\n",
      "2022-10-04 00:01:12.232681: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc65f6e300 of size 2048 next 340\n",
      "2022-10-04 00:01:12.232684: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc65f6eb00 of size 9437184 next 367\n",
      "2022-10-04 00:01:12.232687: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6686eb00 of size 2048 next 366\n",
      "2022-10-04 00:01:12.232690: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6686f300 of size 9437184 next 359\n",
      "2022-10-04 00:01:12.232693: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6716f300 of size 2048 next 349\n",
      "2022-10-04 00:01:12.232695: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6716fb00 of size 9437184 next 347\n",
      "2022-10-04 00:01:12.232698: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc67a6fb00 of size 2048 next 335\n",
      "2022-10-04 00:01:12.232701: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc67a70300 of size 9437184 next 348\n",
      "2022-10-04 00:01:12.232704: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc68370300 of size 2048 next 371\n",
      "2022-10-04 00:01:12.232707: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc68370b00 of size 33554432 next 363\n",
      "2022-10-04 00:01:12.232709: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6a370b00 of size 16384 next 355\n",
      "2022-10-04 00:01:12.232712: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6a374b00 of size 67108864 next 372\n",
      "2022-10-04 00:01:12.232715: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e374b00 of size 16384 next 358\n",
      "2022-10-04 00:01:12.232718: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e378b00 of size 425984 next 360\n",
      "2022-10-04 00:01:12.232721: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e3e0b00 of size 256 next 375\n",
      "2022-10-04 00:01:12.232724: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e3e0c00 of size 6912 next 376\n",
      "2022-10-04 00:01:12.232726: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e3e2700 of size 256 next 377\n",
      "2022-10-04 00:01:12.232729: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e3e2800 of size 147456 next 378\n",
      "2022-10-04 00:01:12.232732: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e406800 of size 256 next 379\n",
      "2022-10-04 00:01:12.232735: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e406900 of size 294912 next 380\n",
      "2022-10-04 00:01:12.232738: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e44e900 of size 512 next 381\n",
      "2022-10-04 00:01:12.232740: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e44eb00 of size 589824 next 382\n",
      "2022-10-04 00:01:12.232743: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e4deb00 of size 512 next 383\n",
      "2022-10-04 00:01:12.232746: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e4ded00 of size 1179648 next 384\n",
      "2022-10-04 00:01:12.232749: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e5fed00 of size 1024 next 385\n",
      "2022-10-04 00:01:12.232752: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e5ff100 of size 2359296 next 386\n",
      "2022-10-04 00:01:12.232754: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e83f100 of size 1024 next 387\n",
      "2022-10-04 00:01:12.232757: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6e83f500 of size 2359296 next 388\n",
      "2022-10-04 00:01:12.232760: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6ea7f500 of size 1024 next 389\n",
      "2022-10-04 00:01:12.232763: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6ea7f900 of size 2359296 next 390\n",
      "2022-10-04 00:01:12.232766: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6ecbf900 of size 1024 next 391\n",
      "2022-10-04 00:01:12.232769: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6ecbfd00 of size 4718592 next 392\n",
      "2022-10-04 00:01:12.232772: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6f13fd00 of size 2048 next 393\n",
      "2022-10-04 00:01:12.232775: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6f140500 of size 9437184 next 394\n",
      "2022-10-04 00:01:12.232777: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6fa40500 of size 2048 next 395\n",
      "2022-10-04 00:01:12.232780: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc6fa40d00 of size 9437184 next 396\n",
      "2022-10-04 00:01:12.232783: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc70340d00 of size 2048 next 397\n",
      "2022-10-04 00:01:12.232786: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc70341500 of size 9437184 next 398\n",
      "2022-10-04 00:01:12.232788: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc70c41500 of size 2048 next 399\n",
      "2022-10-04 00:01:12.232791: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc70c41d00 of size 9437184 next 400\n",
      "2022-10-04 00:01:12.232795: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc71541d00 of size 2048 next 401\n",
      "2022-10-04 00:01:12.232798: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc71542500 of size 9437184 next 402\n",
      "2022-10-04 00:01:12.232800: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc71e42500 of size 2048 next 403\n",
      "2022-10-04 00:01:12.232803: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc71e42d00 of size 9437184 next 404\n",
      "2022-10-04 00:01:12.232806: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc72742d00 of size 2048 next 405\n",
      "2022-10-04 00:01:12.232809: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc72743500 of size 9437184 next 406\n",
      "2022-10-04 00:01:12.232812: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc73043500 of size 2048 next 407\n",
      "2022-10-04 00:01:12.232815: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc73043d00 of size 33554432 next 408\n",
      "2022-10-04 00:01:12.232817: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc75043d00 of size 16384 next 409\n",
      "2022-10-04 00:01:12.232820: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc75047d00 of size 67108864 next 410\n",
      "2022-10-04 00:01:12.232823: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc79047d00 of size 16384 next 411\n",
      "2022-10-04 00:01:12.232826: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc7904bd00 of size 425984 next 412\n",
      "2022-10-04 00:01:12.232829: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b3d00 of size 256 next 413\n",
      "2022-10-04 00:01:12.232831: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b3e00 of size 256 next 414\n",
      "2022-10-04 00:01:12.232834: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b3f00 of size 256 next 415\n",
      "2022-10-04 00:01:12.232837: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4000 of size 256 next 416\n",
      "2022-10-04 00:01:12.232840: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4100 of size 256 next 417\n",
      "2022-10-04 00:01:12.232843: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4200 of size 256 next 418\n",
      "2022-10-04 00:01:12.232845: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4300 of size 256 next 419\n",
      "2022-10-04 00:01:12.232848: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4400 of size 256 next 420\n",
      "2022-10-04 00:01:12.232851: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4500 of size 256 next 457\n",
      "2022-10-04 00:01:12.232854: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4600 of size 256 next 449\n",
      "2022-10-04 00:01:12.232856: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4700 of size 256 next 452\n",
      "2022-10-04 00:01:12.232859: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4800 of size 256 next 455\n",
      "2022-10-04 00:01:12.232862: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc790b4900 of size 33554432 next 428\n",
      "2022-10-04 00:01:12.232865: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc7b0b4900 of size 16384 next 434\n",
      "2022-10-04 00:01:12.232868: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc7b0b8900 of size 67108864 next 445\n",
      "2022-10-04 00:01:12.232870: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc7f0b8900 of size 16384 next 423\n",
      "2022-10-04 00:01:12.232873: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc7f0bc900 of size 425984 next 437\n",
      "2022-10-04 00:01:12.232876: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc7f124900 of size 256 next 435\n",
      "2022-10-04 00:01:12.232879: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc7f124a00 of size 33554432 next 450\n",
      "2022-10-04 00:01:12.232882: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc81124a00 of size 16384 next 459\n",
      "2022-10-04 00:01:12.232885: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc81128a00 of size 67108864 next 424\n",
      "2022-10-04 00:01:12.232888: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85128a00 of size 16384 next 443\n",
      "2022-10-04 00:01:12.232890: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8512ca00 of size 425984 next 444\n",
      "2022-10-04 00:01:12.232893: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85194a00 of size 256 next 430\n",
      "2022-10-04 00:01:12.232896: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85194b00 of size 256 next 441\n",
      "2022-10-04 00:01:12.232899: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85194c00 of size 256 next 431\n",
      "2022-10-04 00:01:12.232902: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85194d00 of size 256 next 432\n",
      "2022-10-04 00:01:12.232904: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85194e00 of size 256 next 440\n",
      "2022-10-04 00:01:12.232907: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85194f00 of size 256 next 421\n",
      "2022-10-04 00:01:12.232910: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85195000 of size 256 next 425\n",
      "2022-10-04 00:01:12.232913: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85195100 of size 256 next 460\n",
      "2022-10-04 00:01:12.232915: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85195200 of size 256 next 454\n",
      "2022-10-04 00:01:12.232918: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85195300 of size 256 next 436\n",
      "2022-10-04 00:01:12.232921: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85195400 of size 256 next 458\n",
      "2022-10-04 00:01:12.232924: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85195500 of size 256 next 451\n",
      "2022-10-04 00:01:12.232927: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85195600 of size 6912 next 446\n",
      "2022-10-04 00:01:12.232929: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85197100 of size 256 next 442\n",
      "2022-10-04 00:01:12.232932: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85197200 of size 147456 next 433\n",
      "2022-10-04 00:01:12.232935: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc851bb200 of size 256 next 453\n",
      "2022-10-04 00:01:12.232938: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc851bb300 of size 294912 next 447\n",
      "2022-10-04 00:01:12.232941: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85203300 of size 512 next 439\n",
      "2022-10-04 00:01:12.232944: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85203500 of size 589824 next 456\n",
      "2022-10-04 00:01:12.232946: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85293500 of size 512 next 461\n",
      "2022-10-04 00:01:12.232949: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85293700 of size 1179648 next 448\n",
      "2022-10-04 00:01:12.232952: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc853b3700 of size 1024 next 426\n",
      "2022-10-04 00:01:12.232955: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc853b3b00 of size 2359296 next 422\n",
      "2022-10-04 00:01:12.232958: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc855f3b00 of size 1024 next 438\n",
      "2022-10-04 00:01:12.232961: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc855f3f00 of size 2359296 next 429\n",
      "2022-10-04 00:01:12.232963: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85833f00 of size 1024 next 427\n",
      "2022-10-04 00:01:12.232966: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85834300 of size 2359296 next 462\n",
      "2022-10-04 00:01:12.232970: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85a74300 of size 1024 next 463\n",
      "2022-10-04 00:01:12.232973: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85a74700 of size 4718592 next 464\n",
      "2022-10-04 00:01:12.232975: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85ef4700 of size 2048 next 465\n",
      "2022-10-04 00:01:12.232978: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc85ef4f00 of size 9437184 next 466\n",
      "2022-10-04 00:01:12.232981: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc867f4f00 of size 2048 next 467\n",
      "2022-10-04 00:01:12.232984: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc867f5700 of size 9437184 next 468\n",
      "2022-10-04 00:01:12.232987: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc870f5700 of size 2048 next 469\n",
      "2022-10-04 00:01:12.232990: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc870f5f00 of size 9437184 next 470\n",
      "2022-10-04 00:01:12.232992: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc879f5f00 of size 2048 next 471\n",
      "2022-10-04 00:01:12.232995: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc879f6700 of size 9437184 next 472\n",
      "2022-10-04 00:01:12.232998: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc882f6700 of size 2048 next 473\n",
      "2022-10-04 00:01:12.233001: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc882f6f00 of size 9437184 next 474\n",
      "2022-10-04 00:01:12.233004: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc88bf6f00 of size 2048 next 475\n",
      "2022-10-04 00:01:12.233006: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc88bf7700 of size 9437184 next 476\n",
      "2022-10-04 00:01:12.233009: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc894f7700 of size 2048 next 477\n",
      "2022-10-04 00:01:12.233012: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc894f7f00 of size 9437184 next 478\n",
      "2022-10-04 00:01:12.233015: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc89df7f00 of size 2048 next 479\n",
      "2022-10-04 00:01:12.233018: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc89df8700 of size 33554432 next 480\n",
      "2022-10-04 00:01:12.233021: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8bdf8700 of size 16384 next 481\n",
      "2022-10-04 00:01:12.233024: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8bdfc700 of size 67108864 next 482\n",
      "2022-10-04 00:01:12.233026: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fdfc700 of size 16384 next 483\n",
      "2022-10-04 00:01:12.233029: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fe00700 of size 425984 next 484\n",
      "2022-10-04 00:01:12.233032: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fe68700 of size 256 next 485\n",
      "2022-10-04 00:01:12.233035: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fe68800 of size 6912 next 486\n",
      "2022-10-04 00:01:12.233038: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fe6a300 of size 256 next 487\n",
      "2022-10-04 00:01:12.233040: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fe6a400 of size 147456 next 488\n",
      "2022-10-04 00:01:12.233043: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fe8e400 of size 256 next 489\n",
      "2022-10-04 00:01:12.233046: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fe8e500 of size 294912 next 490\n",
      "2022-10-04 00:01:12.233049: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fed6500 of size 512 next 491\n",
      "2022-10-04 00:01:12.233052: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8fed6700 of size 589824 next 492\n",
      "2022-10-04 00:01:12.233055: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8ff66700 of size 512 next 493\n",
      "2022-10-04 00:01:12.233058: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc8ff66900 of size 1179648 next 494\n",
      "2022-10-04 00:01:12.233060: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc90086900 of size 1024 next 495\n",
      "2022-10-04 00:01:12.233063: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc90086d00 of size 2359296 next 496\n",
      "2022-10-04 00:01:12.233066: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc902c6d00 of size 1024 next 497\n",
      "2022-10-04 00:01:12.233069: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc902c7100 of size 2359296 next 498\n",
      "2022-10-04 00:01:12.233072: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc90507100 of size 1024 next 499\n",
      "2022-10-04 00:01:12.233074: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc90507500 of size 2359296 next 500\n",
      "2022-10-04 00:01:12.233077: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc90747500 of size 1024 next 501\n",
      "2022-10-04 00:01:12.233080: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc90747900 of size 4718592 next 502\n",
      "2022-10-04 00:01:12.233083: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc90bc7900 of size 2048 next 503\n",
      "2022-10-04 00:01:12.233086: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc90bc8100 of size 9437184 next 504\n",
      "2022-10-04 00:01:12.233088: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc914c8100 of size 2048 next 505\n",
      "2022-10-04 00:01:12.233091: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc914c8900 of size 9437184 next 506\n",
      "2022-10-04 00:01:12.233094: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc91dc8900 of size 2048 next 507\n",
      "2022-10-04 00:01:12.233097: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc91dc9100 of size 9437184 next 508\n",
      "2022-10-04 00:01:12.233100: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc926c9100 of size 2048 next 509\n",
      "2022-10-04 00:01:12.233102: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc926c9900 of size 9437184 next 510\n",
      "2022-10-04 00:01:12.233105: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc92fc9900 of size 2048 next 511\n",
      "2022-10-04 00:01:12.233108: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc92fca100 of size 9437184 next 512\n",
      "2022-10-04 00:01:12.233111: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc938ca100 of size 2048 next 513\n",
      "2022-10-04 00:01:12.233114: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc938ca900 of size 9437184 next 514\n",
      "2022-10-04 00:01:12.233116: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc941ca900 of size 2048 next 515\n",
      "2022-10-04 00:01:12.233119: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc941cb100 of size 9437184 next 516\n",
      "2022-10-04 00:01:12.233122: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc94acb100 of size 2048 next 517\n",
      "2022-10-04 00:01:12.233125: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc94acb900 of size 33554432 next 518\n",
      "2022-10-04 00:01:12.233128: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc96acb900 of size 16384 next 519\n",
      "2022-10-04 00:01:12.233130: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc96acf900 of size 67108864 next 520\n",
      "2022-10-04 00:01:12.233133: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9aacf900 of size 16384 next 521\n",
      "2022-10-04 00:01:12.233136: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9aad3900 of size 425984 next 522\n",
      "2022-10-04 00:01:12.233139: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3b900 of size 256 next 523\n",
      "2022-10-04 00:01:12.233142: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3ba00 of size 256 next 524\n",
      "2022-10-04 00:01:12.233145: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3bb00 of size 256 next 525\n",
      "2022-10-04 00:01:12.233148: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3bc00 of size 256 next 526\n",
      "2022-10-04 00:01:12.233151: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3bd00 of size 256 next 527\n",
      "2022-10-04 00:01:12.233154: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3be00 of size 256 next 528\n",
      "2022-10-04 00:01:12.233157: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3bf00 of size 256 next 529\n",
      "2022-10-04 00:01:12.233159: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3c000 of size 256 next 530\n",
      "2022-10-04 00:01:12.233162: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3c100 of size 256 next 547\n",
      "2022-10-04 00:01:12.233165: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3c200 of size 256 next 534\n",
      "2022-10-04 00:01:12.233167: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3c300 of size 256 next 559\n",
      "2022-10-04 00:01:12.233170: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3c400 of size 256 next 539\n",
      "2022-10-04 00:01:12.233173: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9ab3c500 of size 33554432 next 565\n",
      "2022-10-04 00:01:12.233176: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9cb3c500 of size 16384 next 544\n",
      "2022-10-04 00:01:12.233179: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcc9cb40500 of size 67108864 next 558\n",
      "2022-10-04 00:01:12.233182: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca0b40500 of size 16384 next 566\n",
      "2022-10-04 00:01:12.233184: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca0b44500 of size 425984 next 549\n",
      "2022-10-04 00:01:12.233187: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca0bac500 of size 256 next 533\n",
      "2022-10-04 00:01:12.233190: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca0bac600 of size 33554432 next 564\n",
      "2022-10-04 00:01:12.233193: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca2bac600 of size 16384 next 556\n",
      "2022-10-04 00:01:12.233196: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca2bb0600 of size 67108864 next 557\n",
      "2022-10-04 00:01:12.233199: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6bb0600 of size 16384 next 553\n",
      "2022-10-04 00:01:12.233201: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6bb4600 of size 425984 next 563\n",
      "2022-10-04 00:01:12.233204: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1c600 of size 256 next 569\n",
      "2022-10-04 00:01:12.233207: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1c700 of size 256 next 536\n",
      "2022-10-04 00:01:12.233210: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1c800 of size 256 next 532\n",
      "2022-10-04 00:01:12.233212: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1c900 of size 256 next 561\n",
      "2022-10-04 00:01:12.233215: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1ca00 of size 256 next 554\n",
      "2022-10-04 00:01:12.233218: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1cb00 of size 256 next 537\n",
      "2022-10-04 00:01:12.233221: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1cc00 of size 256 next 562\n",
      "2022-10-04 00:01:12.233224: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1cd00 of size 256 next 538\n",
      "2022-10-04 00:01:12.233226: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1ce00 of size 256 next 542\n",
      "2022-10-04 00:01:12.233229: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1cf00 of size 256 next 548\n",
      "2022-10-04 00:01:12.233232: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1d000 of size 256 next 535\n",
      "2022-10-04 00:01:12.233235: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1d100 of size 256 next 531\n",
      "2022-10-04 00:01:12.233238: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1d200 of size 6912 next 543\n",
      "2022-10-04 00:01:12.233241: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1ed00 of size 256 next 560\n",
      "2022-10-04 00:01:12.233244: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c1ee00 of size 147456 next 546\n",
      "2022-10-04 00:01:12.233247: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c42e00 of size 256 next 540\n",
      "2022-10-04 00:01:12.233250: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c42f00 of size 294912 next 570\n",
      "2022-10-04 00:01:12.233252: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c8af00 of size 512 next 541\n",
      "2022-10-04 00:01:12.233255: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6c8b100 of size 589824 next 555\n",
      "2022-10-04 00:01:12.233258: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6d1b100 of size 512 next 551\n",
      "2022-10-04 00:01:12.233261: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6d1b300 of size 1179648 next 552\n",
      "2022-10-04 00:01:12.233264: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6e3b300 of size 1024 next 571\n",
      "2022-10-04 00:01:12.233267: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca6e3b700 of size 2359296 next 572\n",
      "2022-10-04 00:01:12.233269: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca707b700 of size 1024 next 550\n",
      "2022-10-04 00:01:12.233272: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca707bb00 of size 2359296 next 573\n",
      "2022-10-04 00:01:12.233275: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca72bbb00 of size 1024 next 568\n",
      "2022-10-04 00:01:12.233278: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca72bbf00 of size 2359296 next 545\n",
      "2022-10-04 00:01:12.233281: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca74fbf00 of size 1024 next 567\n",
      "2022-10-04 00:01:12.233283: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca74fc300 of size 4718592 next 574\n",
      "2022-10-04 00:01:12.233286: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca797c300 of size 2048 next 575\n",
      "2022-10-04 00:01:12.233289: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca797cb00 of size 9437184 next 576\n",
      "2022-10-04 00:01:12.233292: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca827cb00 of size 2048 next 577\n",
      "2022-10-04 00:01:12.233295: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca827d300 of size 9437184 next 578\n",
      "2022-10-04 00:01:12.233298: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca8b7d300 of size 2048 next 579\n",
      "2022-10-04 00:01:12.233300: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca8b7db00 of size 9437184 next 580\n",
      "2022-10-04 00:01:12.233303: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca947db00 of size 2048 next 581\n",
      "2022-10-04 00:01:12.233306: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca947e300 of size 9437184 next 582\n",
      "2022-10-04 00:01:12.233309: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca9d7e300 of size 2048 next 583\n",
      "2022-10-04 00:01:12.233311: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fcca9d7eb00 of size 9437184 next 584\n",
      "2022-10-04 00:01:12.233314: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccaa67eb00 of size 2048 next 585\n",
      "2022-10-04 00:01:12.233317: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccaa67f300 of size 9437184 next 586\n",
      "2022-10-04 00:01:12.233320: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccaaf7f300 of size 2048 next 587\n",
      "2022-10-04 00:01:12.233323: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccaaf7fb00 of size 9437184 next 588\n",
      "2022-10-04 00:01:12.233326: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccab87fb00 of size 2048 next 589\n",
      "2022-10-04 00:01:12.233328: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccab880300 of size 33554432 next 590\n",
      "2022-10-04 00:01:12.233331: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccad880300 of size 16384 next 591\n",
      "2022-10-04 00:01:12.233334: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccad884300 of size 67108864 next 592\n",
      "2022-10-04 00:01:12.233337: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1884300 of size 16384 next 593\n",
      "2022-10-04 00:01:12.233339: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1888300 of size 425984 next 594\n",
      "2022-10-04 00:01:12.233342: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb18f0300 of size 256 next 595\n",
      "2022-10-04 00:01:12.233345: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb18f0400 of size 6912 next 596\n",
      "2022-10-04 00:01:12.233348: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb18f1f00 of size 256 next 597\n",
      "2022-10-04 00:01:12.233351: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb18f2000 of size 147456 next 598\n",
      "2022-10-04 00:01:12.233353: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1916000 of size 256 next 599\n",
      "2022-10-04 00:01:12.233356: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1916100 of size 294912 next 600\n",
      "2022-10-04 00:01:12.233359: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb195e100 of size 512 next 601\n",
      "2022-10-04 00:01:12.233362: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb195e300 of size 589824 next 602\n",
      "2022-10-04 00:01:12.233365: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb19ee300 of size 512 next 603\n",
      "2022-10-04 00:01:12.233368: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb19ee500 of size 1179648 next 604\n",
      "2022-10-04 00:01:12.233371: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1b0e500 of size 1024 next 605\n",
      "2022-10-04 00:01:12.233373: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1b0e900 of size 2359296 next 606\n",
      "2022-10-04 00:01:12.233376: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1d4e900 of size 1024 next 607\n",
      "2022-10-04 00:01:12.233379: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1d4ed00 of size 2359296 next 608\n",
      "2022-10-04 00:01:12.233382: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1f8ed00 of size 1024 next 609\n",
      "2022-10-04 00:01:12.233385: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb1f8f100 of size 2359296 next 610\n",
      "2022-10-04 00:01:12.233387: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb21cf100 of size 1024 next 611\n",
      "2022-10-04 00:01:12.233390: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb21cf500 of size 4718592 next 612\n",
      "2022-10-04 00:01:12.233393: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb264f500 of size 2048 next 613\n",
      "2022-10-04 00:01:12.233396: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb264fd00 of size 9437184 next 614\n",
      "2022-10-04 00:01:12.233399: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb2f4fd00 of size 2048 next 615\n",
      "2022-10-04 00:01:12.233401: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb2f50500 of size 9437184 next 616\n",
      "2022-10-04 00:01:12.233404: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb3850500 of size 2048 next 617\n",
      "2022-10-04 00:01:12.233408: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb3850d00 of size 9437184 next 618\n",
      "2022-10-04 00:01:12.233411: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb4150d00 of size 2048 next 619\n",
      "2022-10-04 00:01:12.233413: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb4151500 of size 9437184 next 620\n",
      "2022-10-04 00:01:12.233416: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb4a51500 of size 2048 next 621\n",
      "2022-10-04 00:01:12.233419: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb4a51d00 of size 9437184 next 622\n",
      "2022-10-04 00:01:12.233422: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb5351d00 of size 2048 next 623\n",
      "2022-10-04 00:01:12.233425: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb5352500 of size 9437184 next 624\n",
      "2022-10-04 00:01:12.233427: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb5c52500 of size 2048 next 625\n",
      "2022-10-04 00:01:12.233430: I tensorflow/core/common_runtime/bfc_allocator.cc:1089] InUse at 7fccb5c52d00 of size 10408704 next 18446744073709551615\n",
      "2022-10-04 00:01:12.233433: I tensorflow/core/common_runtime/bfc_allocator.cc:1094]      Summary of in-use Chunks by size: \n",
      "2022-10-04 00:01:12.233438: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 206 Chunks of size 256 totalling 51.5KiB\n",
      "2022-10-04 00:01:12.233442: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 21 Chunks of size 512 totalling 10.5KiB\n",
      "2022-10-04 00:01:12.233446: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 768 totalling 768B\n",
      "2022-10-04 00:01:12.233449: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 42 Chunks of size 1024 totalling 42.0KiB\n",
      "2022-10-04 00:01:12.233453: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 1280 totalling 1.2KiB\n",
      "2022-10-04 00:01:12.233456: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 1536 totalling 1.5KiB\n",
      "2022-10-04 00:01:12.233459: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 1792 totalling 1.8KiB\n",
      "2022-10-04 00:01:12.233463: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 85 Chunks of size 2048 totalling 170.0KiB\n",
      "2022-10-04 00:01:12.233466: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 3072 totalling 3.0KiB\n",
      "2022-10-04 00:01:12.233469: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 3584 totalling 3.5KiB\n",
      "2022-10-04 00:01:12.233473: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 11 Chunks of size 6912 totalling 74.2KiB\n",
      "2022-10-04 00:01:12.233476: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 34 Chunks of size 16384 totalling 544.0KiB\n",
      "2022-10-04 00:01:12.233480: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 17408 totalling 17.0KiB\n",
      "2022-10-04 00:01:12.233483: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 31488 totalling 30.8KiB\n",
      "2022-10-04 00:01:12.233487: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 11 Chunks of size 147456 totalling 1.55MiB\n",
      "2022-10-04 00:01:12.233490: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 11 Chunks of size 294912 totalling 3.09MiB\n",
      "2022-10-04 00:01:12.233494: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 16 Chunks of size 425984 totalling 6.50MiB\n",
      "2022-10-04 00:01:12.233497: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 9 Chunks of size 589824 totalling 5.06MiB\n",
      "2022-10-04 00:01:12.233500: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 753664 totalling 736.0KiB\n",
      "2022-10-04 00:01:12.233504: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 823552 totalling 804.2KiB\n",
      "2022-10-04 00:01:12.233507: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 1125888 totalling 1.07MiB\n",
      "2022-10-04 00:01:12.233511: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 1166336 totalling 1.11MiB\n",
      "2022-10-04 00:01:12.233514: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 11 Chunks of size 1179648 totalling 12.38MiB\n",
      "2022-10-04 00:01:12.233518: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 30 Chunks of size 2359296 totalling 67.50MiB\n",
      "2022-10-04 00:01:12.233521: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 2744576 totalling 2.62MiB\n",
      "2022-10-04 00:01:12.233524: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 3538944 totalling 3.38MiB\n",
      "2022-10-04 00:01:12.233528: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 4325376 totalling 4.12MiB\n",
      "2022-10-04 00:01:12.233531: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 11 Chunks of size 4718592 totalling 49.50MiB\n",
      "2022-10-04 00:01:12.233535: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 73 Chunks of size 9437184 totalling 657.00MiB\n",
      "2022-10-04 00:01:12.233538: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 10408704 totalling 9.93MiB\n",
      "2022-10-04 00:01:12.233542: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 14155776 totalling 13.50MiB\n",
      "2022-10-04 00:01:12.233545: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 14852608 totalling 14.16MiB\n",
      "2022-10-04 00:01:12.233549: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 16515072 totalling 15.75MiB\n",
      "2022-10-04 00:01:12.233552: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 17 Chunks of size 33554432 totalling 544.00MiB\n",
      "2022-10-04 00:01:12.233556: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 1 Chunks of size 66682880 totalling 63.59MiB\n",
      "2022-10-04 00:01:12.233559: I tensorflow/core/common_runtime/bfc_allocator.cc:1097] 18 Chunks of size 67108864 totalling 1.12GiB\n",
      "2022-10-04 00:01:12.233562: I tensorflow/core/common_runtime/bfc_allocator.cc:1101] Sum Total of in-use chunks: 2.57GiB\n",
      "2022-10-04 00:01:12.233566: I tensorflow/core/common_runtime/bfc_allocator.cc:1103] total_region_allocated_bytes_: 2758017024 memory_limit_: 2758017024 available bytes: 0 curr_region_allocation_bytes_: 5516034048\n",
      "2022-10-04 00:01:12.233572: I tensorflow/core/common_runtime/bfc_allocator.cc:1109] Stats: \n",
      "Limit:                      2758017024\n",
      "InUse:                      2758017024\n",
      "MaxInUse:                   2758017024\n",
      "NumAllocs:                     1242404\n",
      "MaxAllocSize:               1228931072\n",
      "Reserved:                            0\n",
      "PeakReserved:                        0\n",
      "LargestFreeBlock:                    0\n",
      "\n",
      "2022-10-04 00:01:12.233596: W tensorflow/core/common_runtime/bfc_allocator.cc:491] ****************************************************************************************************\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    dst_train,\n",
    "    validation_data=dst_val,\n",
    "    epochs=10,\n",
    "    callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=2),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e578da2d-872a-4fbc-91dc-6c186d32694e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "397ba47d-09aa-411b-a92d-891df73ed1ed",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fea428fa-0cdf-4452-a139-27c93ad16f82",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51c04cc5-dd53-402d-8e8d-1ba4b95c6ac8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b17da5d-83d2-4d3c-96d4-082e8e1b73d3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "932c5d15-c85f-4e95-83cb-7bd95b28796a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f7a8f8c-41d7-412d-8055-1b4fdc19a0f6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (hiasci)",
   "language": "python",
   "name": "hiasci"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
